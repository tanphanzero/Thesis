
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800937c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000e88  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000f00  20000f00  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a2b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297c  00000000  00000000  00036acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00039450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f30  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e1d  00000000  00000000  0003b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e2b  00000000  00000000  0005e18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e47  00000000  00000000  0006ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142dff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a8c  00000000  00000000  00142e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009030 	.word	0x08009030

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08009030 	.word	0x08009030

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0a5a      	lsrs	r2, r3, #9
 8000dd8:	490f      	ldr	r1, [pc, #60]	; (8000e18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000dda:	fba1 1202 	umull	r1, r2, r1, r2
 8000dde:	09d2      	lsrs	r2, r2, #7
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000de2:	fb01 f202 	mul.w	r2, r1, r2
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	441a      	add	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	00044b83 	.word	0x00044b83
 8000e1c:	3b9aca00 	.word	0x3b9aca00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f004 fb52 	bl	80054cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f814 	bl	8000e54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 fa70 	bl	8001310 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000e30:	f000 fa46 	bl	80012c0 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8000e34:	f000 f8e4 	bl	8001000 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000e38:	f000 f958 	bl	80010ec <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8000e3c:	f000 fa12 	bl	8001264 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000e40:	f000 f87c 	bl	8000f3c <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 8000e44:	f000 f9b0 	bl	80011a8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000e48:	f003 fa64 	bl	8004314 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000e4c:	f003 fa8e 	bl	800436c <loop>
 8000e50:	e7fc      	b.n	8000e4c <main+0x2c>
	...

08000e54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 ff5a 	bl	8008d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <_Z18SystemClock_Configv+0xe0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a2c      	ldr	r2, [pc, #176]	; (8000f34 <_Z18SystemClock_Configv+0xe0>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <_Z18SystemClock_Configv+0xe0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <_Z18SystemClock_Configv+0xe4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <_Z18SystemClock_Configv+0xe4>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <_Z18SystemClock_Configv+0xe4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fa56 	bl	800638c <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000ef0:	f000 fa7c 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2105      	movs	r1, #5
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fcb2 	bl	800687c <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000f28:	f000 fa60 	bl	80013ec <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3750      	adds	r7, #80	; 0x50
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fee6 	bl	8008d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <_ZL12MX_TIM1_Initv+0xc0>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f84:	2303      	movs	r3, #3
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fb0:	f005 ff9c 	bl	8006eec <HAL_TIM_Encoder_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 fa12 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fd6:	f006 fbf5 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000fea:	f000 f9ff 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	; 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000094 	.word	0x20000094
 8000ffc:	40010000 	.word	0x40010000

08001000 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 8001024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 800102c:	222a      	movs	r2, #42	; 0x2a
 800102e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 8001038:	2263      	movs	r2, #99	; 0x63
 800103a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001048:	4827      	ldr	r0, [pc, #156]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 800104a:	f005 fe37 	bl	8006cbc <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800105e:	f000 f9c5 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4619      	mov	r1, r3
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 8001072:	f006 fba7 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8001086:	f000 f9b1 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108a:	2360      	movs	r3, #96	; 0x60
 800108c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2208      	movs	r2, #8
 800109e:	4619      	mov	r1, r3
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 80010a2:	f006 f857 	bl	8007154 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 80010b6:	f000 f999 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	220c      	movs	r2, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 80010c2:	f006 f847 	bl	8007154 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80010d6:	f000 f989 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <_ZL12MX_TIM2_Initv+0xe8>)
 80010dc:	f004 f82e 	bl	800513c <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000dc 	.word	0x200000dc

080010ec <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 fe0e 	bl	8008d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800110a:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <_ZL12MX_TIM3_Initv+0xb8>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800112e:	2303      	movs	r3, #3
 8001130:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800115a:	f005 fec7 	bl	8006eec <HAL_TIM_Encoder_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800116e:	f000 f93d 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001180:	f006 fb20 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001194:	f000 f92a 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000124 	.word	0x20000124
 80011a4:	40000400 	.word	0x40000400

080011a8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 fdb0 	bl	8008d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011c6:	4a26      	ldr	r2, [pc, #152]	; (8001260 <_ZL12MX_TIM4_Initv+0xb8>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001202:	2301      	movs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 8001216:	f005 fe69 	bl	8006eec <HAL_TIM_Encoder_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800122a:	f000 f8df 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <_ZL12MX_TIM4_Initv+0xb4>)
 800123c:	f006 fac2 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001250:	f000 f8cc 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000016c 	.word	0x2000016c
 8001260:	40000800 	.word	0x40000800

08001264 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800129c:	f006 fb0e 	bl	80078bc <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80012b0:	f000 f89c 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001b4 	.word	0x200001b4
 80012bc:	40004400 	.word	0x40004400

080012c0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_ZL11MX_DMA_Initv+0x4c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <_ZL11MX_DMA_Initv+0x4c>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <_ZL11MX_DMA_Initv+0x4c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2010      	movs	r0, #16
 80012e8:	f004 fa61 	bl	80057ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f004 fa7a 	bl	80057e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2011      	movs	r0, #17
 80012f8:	f004 fa59 	bl	80057ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012fc:	2011      	movs	r0, #17
 80012fe:	f004 fa72 	bl	80057e6 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <_ZL12MX_GPIO_Initv+0xd4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd8>)
 80013ba:	f004 ffcd 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 80013be:	f24c 0303 	movw	r3, #49155	; 0xc003
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd8>)
 80013d8:	f004 fe22 	bl	8006020 <HAL_GPIO_Init>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020800 	.word	0x40020800

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>

080013f6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <_ZN3ros3MsgC1Ev+0x1c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	08009338 	.word	0x08009338

08001438 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
      data()
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffe8 	bl	8001418 <_ZN3ros3MsgC1Ev>
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3304      	adds	r3, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffcf 	bl	80013f6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08009320 	.word	0x08009320

08001468 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	4413      	add	r3, r2
 8001480:	b2ca      	uxtb	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0a19      	lsrs	r1, r3, #8
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0c19      	lsrs	r1, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3302      	adds	r3, #2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2ca      	uxtb	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	0e19      	lsrs	r1, r3, #24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3303      	adds	r3, #3
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	0a19      	lsrs	r1, r3, #8
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	0c19      	lsrs	r1, r3, #16
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3302      	adds	r3, #2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	0e19      	lsrs	r1, r3, #24
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3303      	adds	r3, #3
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3304      	adds	r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
      return offset;
 800150a:	68fb      	ldr	r3, [r7, #12]
    }
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	440b      	add	r3, r1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3302      	adds	r3, #2
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	440b      	add	r3, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3303      	adds	r3, #3
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	440b      	add	r3, r1
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3302      	adds	r3, #2
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	440b      	add	r3, r1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3303      	adds	r3, #3
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	440b      	add	r3, r1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3304      	adds	r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
     return offset;
 80015d2:	68fb      	ldr	r3, [r7, #12]
    }
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	08009048 	.word	0x08009048

080015fc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08009058 	.word	0x08009058

08001618 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fef8 	bl	8001418 <_ZN3ros3MsgC1Ev>
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	809a      	strh	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
    {
    }
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08009308 	.word	0x08009308
 800165c:	0800907c 	.word	0x0800907c

08001660 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	8899      	ldrh	r1, [r3, #4]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	b2ca      	uxtb	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	889b      	ldrh	r3, [r3, #4]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b299      	uxth	r1, r3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3301      	adds	r3, #1
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3302      	adds	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd94 	bl	80001c8 <strlen>
 80016a0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fe76 	bl	800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3304      	adds	r3, #4
 80016b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	18d0      	adds	r0, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f007 fb1c 	bl	8008d00 <memcpy>
      offset += length_topic_name;
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4413      	add	r3, r2
 80016ce:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd77 	bl	80001c8 <strlen>
 80016da:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fe59 	bl	800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	18d0      	adds	r0, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f007 faff 	bl	8008d00 <memcpy>
      offset += length_message_type;
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd5a 	bl	80001c8 <strlen>
 8001714:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fe3c 	bl	800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3304      	adds	r3, #4
 8001728:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	18d0      	adds	r0, r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4619      	mov	r1, r3
 8001738:	f007 fae2 	bl	8008d00 <memcpy>
      offset += length_md5sum;
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4413      	add	r3, r2
 8001742:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	4413      	add	r3, r2
 8001752:	b2ca      	uxtb	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	0a19      	lsrs	r1, r3, #8
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0c19      	lsrs	r1, r3, #16
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3302      	adds	r3, #2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0e19      	lsrs	r1, r3, #24
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3303      	adds	r3, #3
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	61fb      	str	r3, [r7, #28]
      return offset;
 800178c:	69fb      	ldr	r3, [r7, #28]
    }
 800178e:	4618      	mov	r0, r3
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001796:	b580      	push	{r7, lr}
 8001798:	b08a      	sub	sp, #40	; 0x28
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	889b      	ldrh	r3, [r3, #4]
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	3301      	adds	r3, #1
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	440b      	add	r3, r1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	3302      	adds	r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	441a      	add	r2, r3
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fdf8 	bl	80043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	3304      	adds	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	4413      	add	r3, r2
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	441a      	add	r2, r3
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3b01      	subs	r3, #1
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	440b      	add	r3, r1
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	3301      	adds	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	e7ec      	b.n	80017f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4413      	add	r3, r2
 800181e:	3b01      	subs	r3, #1
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3b01      	subs	r3, #1
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	441a      	add	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4413      	add	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	441a      	add	r2, r3
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fdc5 	bl	80043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	3304      	adds	r3, #4
 8001852:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	6a3a      	ldr	r2, [r7, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d20c      	bcs.n	800187e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	441a      	add	r2, r3
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	3b01      	subs	r3, #1
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	440b      	add	r3, r1
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	3301      	adds	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
 800187c:	e7ec      	b.n	8001858 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	3b01      	subs	r3, #1
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3b01      	subs	r3, #1
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	441a      	add	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4413      	add	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	441a      	add	r2, r3
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fd92 	bl	80043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	3304      	adds	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	440b      	add	r3, r1
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e7ec      	b.n	80018be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	3b01      	subs	r3, #1
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	441a      	add	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	440a      	add	r2, r1
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3301      	adds	r3, #1
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	440b      	add	r3, r1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	4313      	orrs	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3302      	adds	r3, #2
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	440b      	add	r3, r1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	4313      	orrs	r3, r2
 800193c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	3303      	adds	r3, #3
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	440b      	add	r3, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	061b      	lsls	r3, r3, #24
 800194c:	4313      	orrs	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3304      	adds	r3, #4
 800195a:	61bb      	str	r3, [r7, #24]
     return offset;
 800195c:	69bb      	ldr	r3, [r7, #24]
    }
 800195e:	4618      	mov	r0, r3
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	08009080 	.word	0x08009080

08001984 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	0800909c 	.word	0x0800909c

080019a0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd34 	bl	8001418 <_ZN3ros3MsgC1Ev>
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	711a      	strb	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019c0:	609a      	str	r2, [r3, #8]
    {
    }
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	080092f0 	.word	0x080092f0
 80019d0:	0800907c 	.word	0x0800907c

080019d4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	7912      	ldrb	r2, [r2, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fbe5 	bl	80001c8 <strlen>
 80019fe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fcc7 	bl	800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	18d0      	adds	r0, r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f007 f96d 	bl	8008d00 <memcpy>
      offset += length_msg;
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    }
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	441a      	add	r2, r3
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fcb7 	bl	80043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d20c      	bcs.n	8001a9a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	441a      	add	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e7ec      	b.n	8001a74 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
     return offset;
 8001abe:	693b      	ldr	r3, [r7, #16]
    }
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	080090c0 	.word	0x080090c0

08001ae4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	080090d4 	.word	0x080090d4

08001b00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc84 	bl	8001418 <_ZN3ros3MsgC1Ev>
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	080092d8 	.word	0x080092d8

08001b5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	0a19      	lsrs	r1, r3, #8
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	0c19      	lsrs	r1, r3, #16
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3302      	adds	r3, #2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0e19      	lsrs	r1, r3, #24
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	6a3a      	ldr	r2, [r7, #32]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d22b      	bcs.n	8001c1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001bd0:	6939      	ldr	r1, [r7, #16]
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	0a19      	lsrs	r1, r3, #8
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	3301      	adds	r3, #1
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2ca      	uxtb	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	0c19      	lsrs	r1, r3, #16
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	0e19      	lsrs	r1, r3, #24
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3303      	adds	r3, #3
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3304      	adds	r3, #4
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	3301      	adds	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	e7ce      	b.n	8001bb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6919      	ldr	r1, [r3, #16]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	0a19      	lsrs	r1, r3, #8
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	0c19      	lsrs	r1, r3, #16
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	3302      	adds	r3, #2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b2ca      	uxtb	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	0e19      	lsrs	r1, r3, #24
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	3303      	adds	r3, #3
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3304      	adds	r3, #4
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d22b      	bcs.n	8001cca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	0a19      	lsrs	r1, r3, #8
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	3301      	adds	r3, #1
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0c19      	lsrs	r1, r3, #16
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0e19      	lsrs	r1, r3, #24
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	e7ce      	b.n	8001c68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69d9      	ldr	r1, [r3, #28]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	0a19      	lsrs	r1, r3, #8
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	0c19      	lsrs	r1, r3, #16
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2ca      	uxtb	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	0e19      	lsrs	r1, r3, #24
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3303      	adds	r3, #3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	3304      	adds	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d228      	bcs.n	8001d74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa4a 	bl	80001c8 <strlen>
 8001d34:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fb2c 	bl	800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	3304      	adds	r3, #4
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	18d0      	adds	r0, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f006 ffce 	bl	8008d00 <memcpy>
      offset += length_stringsi;
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4413      	add	r3, r2
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e7d1      	b.n	8001d18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d76:	4618      	mov	r0, r3
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b08e      	sub	sp, #56	; 0x38
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	3301      	adds	r3, #1
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001daa:	3302      	adds	r3, #2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	6a3a      	ldr	r2, [r7, #32]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	6a3a      	ldr	r2, [r7, #32]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	3304      	adds	r3, #4
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	6a3a      	ldr	r2, [r7, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d90a      	bls.n	8001df2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f006 ffa0 	bl	8008d2c <realloc>
 8001dec:	4602      	mov	r2, r0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d236      	bcs.n	8001e74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	440a      	add	r2, r1
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	6839      	ldr	r1, [r7, #0]
 8001e20:	440b      	add	r3, r1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3302      	adds	r3, #2
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	440b      	add	r3, r1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	3303      	adds	r3, #3
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	440b      	add	r3, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	3304      	adds	r3, #4
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	3301      	adds	r3, #1
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
 8001e72:	e7c3      	b.n	8001dfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	3301      	adds	r3, #1
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3302      	adds	r3, #2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d90a      	bls.n	8001eda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f006 ff2c 	bl	8008d2c <realloc>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d236      	bcs.n	8001f5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	440a      	add	r2, r1
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	440b      	add	r3, r1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3302      	adds	r3, #2
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3303      	adds	r3, #3
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	3304      	adds	r3, #4
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	3214      	adds	r2, #20
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	3301      	adds	r3, #1
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5a:	e7c3      	b.n	8001ee4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3301      	adds	r3, #1
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d90a      	bls.n	8001fc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f006 feb8 	bl	8008d2c <realloc>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d23f      	bcs.n	8002056 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	441a      	add	r2, r3
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 f9f8 	bl	80043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	3304      	adds	r3, #4
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d20c      	bcs.n	8002018 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	441a      	add	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3b01      	subs	r3, #1
 8002008:	6839      	ldr	r1, [r7, #0]
 800200a:	440b      	add	r3, r1
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3301      	adds	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e7ec      	b.n	8001ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	3b01      	subs	r3, #1
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	3b01      	subs	r3, #1
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	441a      	add	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3220      	adds	r2, #32
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	3301      	adds	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
 8002054:	e7ba      	b.n	8001fcc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002058:	4618      	mov	r0, r3
 800205a:	3738      	adds	r7, #56	; 0x38
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	08009214 	.word	0x08009214

0800207c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	080090f8 	.word	0x080090f8

08002098 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68d8      	ldr	r0, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6891      	ldr	r1, [r2, #8]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4798      	blx	r3
 80020e4:	4603      	mov	r3, r0
  };
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
  }
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <_ZN13STM32HardwareC1Ev+0x34>)
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	200001b4 	.word	0x200001b4

08002164 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f804 	bl	800217a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	4619      	mov	r1, r3
 8002190:	f005 fc60 	bl	8007a54 <HAL_UART_Receive_DMA>
    }
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN13STM32Hardware4readEv>:

    int read(){
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffa8 	bl	8002106 <_ZN13STM32Hardware10getRdmaIndEv>
 80021b6:	4603      	mov	r3, r0
 80021b8:	429c      	cmp	r4, r3
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d012      	beq.n	80021ec <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021cc:	1c59      	adds	r1, r3, #1
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80021ec:	68fb      	ldr	r3, [r7, #12]
    }
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
	...

080021f8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d108      	bne.n	8002220 <_ZN13STM32Hardware5flushEv+0x28>
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_ZN13STM32Hardware5flushEv+0x28>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <_ZN13STM32Hardware5flushEv+0x2a>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03f      	beq.n	80022a6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002238:	429a      	cmp	r2, r3
 800223a:	d031      	beq.n	80022a0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002248:	429a      	cmp	r2, r3
 800224a:	d20a      	bcs.n	8002262 <_ZN13STM32Hardware5flushEv+0x6a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800225a:	b29b      	uxth	r3, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	b29b      	uxth	r3, r3
 8002260:	e006      	b.n	8002270 <_ZN13STM32Hardware5flushEv+0x78>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002268:	b29b      	uxth	r3, r3
 800226a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800226e:	b29b      	uxth	r3, r3
 8002270:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800227c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	89fa      	ldrh	r2, [r7, #14]
 8002286:	4619      	mov	r1, r3
 8002288:	f005 fb66 	bl	8007958 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	4413      	add	r3, r2
 8002296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
      }
    }
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200002b8 	.word	0x200002b8

080022b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
      int n = length;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	bfa8      	it	ge
 80022cc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80022d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80022d8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4293      	cmp	r3, r2
 80022e0:	bf28      	it	cs
 80022e2:	4613      	movcs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80022ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 fd01 	bl	8008d00 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d00b      	beq.n	8002332 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	18d1      	adds	r1, r2, r3
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	461a      	mov	r2, r3
 800232e:	f006 fce7 	bl	8008d00 <memcpy>
      }

      flush();
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff ff60 	bl	80021f8 <_ZN13STM32Hardware5flushEv>
    }
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	f003 f926 	bl	8005598 <HAL_GetTick>
 800234c:	4603      	mov	r3, r0
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
      data(0)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f858 	bl	8001418 <_ZN3ros3MsgC1Ev>
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <_ZN8std_msgs7Float64C1Ev+0x30>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	08009294 	.word	0x08009294

0800238c <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80023a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	4401      	add	r1, r0
 80023ae:	b2d3      	uxtb	r3, r2
 80023b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80023b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	0a02      	lsrs	r2, r0, #8
 80023c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023c4:	0a0b      	lsrs	r3, r1, #8
 80023c6:	6979      	ldr	r1, [r7, #20]
 80023c8:	3101      	adds	r1, #1
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	4401      	add	r1, r0
 80023ce:	b2d3      	uxtb	r3, r2
 80023d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80023d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	0c02      	lsrs	r2, r0, #16
 80023e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023e4:	0c0b      	lsrs	r3, r1, #16
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	3102      	adds	r1, #2
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	4401      	add	r1, r0
 80023ee:	b2d3      	uxtb	r3, r2
 80023f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80023f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	0e02      	lsrs	r2, r0, #24
 8002400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002404:	0e0b      	lsrs	r3, r1, #24
 8002406:	6979      	ldr	r1, [r7, #20]
 8002408:	3103      	adds	r1, #3
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	4401      	add	r1, r0
 800240e:	b2d3      	uxtb	r3, r2
 8002410:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	000a      	movs	r2, r1
 8002420:	2300      	movs	r3, #0
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	3104      	adds	r1, #4
 8002426:	6838      	ldr	r0, [r7, #0]
 8002428:	4401      	add	r1, r0
 800242a:	b2d3      	uxtb	r3, r2
 800242c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800242e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	0a0a      	lsrs	r2, r1, #8
 800243c:	2300      	movs	r3, #0
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	3105      	adds	r1, #5
 8002442:	6838      	ldr	r0, [r7, #0]
 8002444:	4401      	add	r1, r0
 8002446:	b2d3      	uxtb	r3, r2
 8002448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800244a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	0c0a      	lsrs	r2, r1, #16
 8002458:	2300      	movs	r3, #0
 800245a:	6979      	ldr	r1, [r7, #20]
 800245c:	3106      	adds	r1, #6
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	4401      	add	r1, r0
 8002462:	b2d3      	uxtb	r3, r2
 8002464:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	0e0a      	lsrs	r2, r1, #24
 8002474:	2300      	movs	r3, #0
 8002476:	6979      	ldr	r1, [r7, #20]
 8002478:	3107      	adds	r1, #7
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	4401      	add	r1, r0
 800247e:	b2d3      	uxtb	r3, r2
 8002480:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3308      	adds	r3, #8
 8002486:	617b      	str	r3, [r7, #20]
      return offset;
 8002488:	697b      	ldr	r3, [r7, #20]
    }
 800248a:	4618      	mov	r0, r3
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002496:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800249a:	b0a3      	sub	sp, #140	; 0x8c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6778      	str	r0, [r7, #116]	; 0x74
 80024a0:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	461c      	mov	r4, r3
 80024c8:	4615      	mov	r5, r2
 80024ca:	ea40 0804 	orr.w	r8, r0, r4
 80024ce:	ea41 0905 	orr.w	r9, r1, r5
 80024d2:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	469a      	mov	sl, r3
 80024ec:	4693      	mov	fp, r2
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80024fa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80024fe:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002502:	ea40 0402 	orr.w	r4, r0, r2
 8002506:	66bc      	str	r4, [r7, #104]	; 0x68
 8002508:	430b      	orrs	r3, r1
 800250a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800250c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002510:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002514:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251c:	1c9a      	adds	r2, r3, #2
 800251e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2200      	movs	r2, #0
 8002528:	663b      	str	r3, [r7, #96]	; 0x60
 800252a:	667a      	str	r2, [r7, #100]	; 0x64
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002538:	464c      	mov	r4, r9
 800253a:	0423      	lsls	r3, r4, #16
 800253c:	4644      	mov	r4, r8
 800253e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002542:	4644      	mov	r4, r8
 8002544:	0422      	lsls	r2, r4, #16
 8002546:	ea40 0402 	orr.w	r4, r0, r2
 800254a:	65bc      	str	r4, [r7, #88]	; 0x58
 800254c:	430b      	orrs	r3, r1
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002550:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002554:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002558:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002560:	1cda      	adds	r2, r3, #3
 8002562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2200      	movs	r2, #0
 800256c:	653b      	str	r3, [r7, #80]	; 0x50
 800256e:	657a      	str	r2, [r7, #84]	; 0x54
 8002570:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002574:	4623      	mov	r3, r4
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800257a:	4623      	mov	r3, r4
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002580:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002584:	4623      	mov	r3, r4
 8002586:	4303      	orrs	r3, r0
 8002588:	643b      	str	r3, [r7, #64]	; 0x40
 800258a:	462b      	mov	r3, r5
 800258c:	430b      	orrs	r3, r1
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002594:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002598:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800259c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a0:	1d1a      	adds	r2, r3, #4
 80025a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a4:	4413      	add	r3, r2
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80025ba:	0023      	movs	r3, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	ea40 0402 	orr.w	r4, r0, r2
 80025c2:	633c      	str	r4, [r7, #48]	; 0x30
 80025c4:	430b      	orrs	r3, r1
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80025cc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80025d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80025d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d8:	1d5a      	adds	r2, r3, #5
 80025da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2200      	movs	r2, #0
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80025f2:	0223      	lsls	r3, r4, #8
 80025f4:	2200      	movs	r2, #0
 80025f6:	ea40 0402 	orr.w	r4, r0, r2
 80025fa:	623c      	str	r4, [r7, #32]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002604:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002608:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800260c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002610:	3306      	adds	r3, #6
 8002612:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2200      	movs	r2, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	61fa      	str	r2, [r7, #28]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	69bc      	ldr	r4, [r7, #24]
 800262a:	0423      	lsls	r3, r4, #16
 800262c:	2200      	movs	r2, #0
 800262e:	ea40 0402 	orr.w	r4, r0, r2
 8002632:	613c      	str	r4, [r7, #16]
 8002634:	430b      	orrs	r3, r1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800263c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002640:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002648:	3307      	adds	r3, #7
 800264a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2200      	movs	r2, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	60fa      	str	r2, [r7, #12]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	68bc      	ldr	r4, [r7, #8]
 8002662:	0623      	lsls	r3, r4, #24
 8002664:	2200      	movs	r2, #0
 8002666:	ea40 0402 	orr.w	r4, r0, r2
 800266a:	603c      	str	r4, [r7, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002674:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8002678:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800267c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800267e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8002682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002686:	3308      	adds	r3, #8
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8002690:	4618      	mov	r0, r3
 8002692:	378c      	adds	r7, #140	; 0x8c
 8002694:	46bd      	mov	sp, r7
 8002696:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800269a:	4770      	bx	lr

0800269c <_ZN8std_msgs7Float647getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float64"; };
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	0800911c 	.word	0x0800911c

080026b8 <_ZN8std_msgs7Float646getMD5Ev>:
    virtual const char * getMD5() override { return "fdb28210bfa9d7c91146260178d9a584"; };
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08009130 	.word	0x08009130

080026d4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fe9a 	bl	8001418 <_ZN3ros3MsgC1Ev>
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	0800927c 	.word	0x0800927c

08002724 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002724:	b480      	push	{r7}
 8002726:	b08b      	sub	sp, #44	; 0x2c
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002738:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	4401      	add	r1, r0
 8002746:	b2d3      	uxtb	r3, r2
 8002748:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800274a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	0a02      	lsrs	r2, r0, #8
 8002758:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800275c:	0a0b      	lsrs	r3, r1, #8
 800275e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002760:	3101      	adds	r1, #1
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	4401      	add	r1, r0
 8002766:	b2d3      	uxtb	r3, r2
 8002768:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800276a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	0c02      	lsrs	r2, r0, #16
 8002778:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800277c:	0c0b      	lsrs	r3, r1, #16
 800277e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002780:	3102      	adds	r1, #2
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	4401      	add	r1, r0
 8002786:	b2d3      	uxtb	r3, r2
 8002788:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800278a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	0e02      	lsrs	r2, r0, #24
 8002798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800279c:	0e0b      	lsrs	r3, r1, #24
 800279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a0:	3103      	adds	r1, #3
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	4401      	add	r1, r0
 80027a6:	b2d3      	uxtb	r3, r2
 80027a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80027aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	000a      	movs	r2, r1
 80027b8:	2300      	movs	r3, #0
 80027ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027bc:	3104      	adds	r1, #4
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	4401      	add	r1, r0
 80027c2:	b2d3      	uxtb	r3, r2
 80027c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80027c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	0a0a      	lsrs	r2, r1, #8
 80027d4:	2300      	movs	r3, #0
 80027d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d8:	3105      	adds	r1, #5
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	4401      	add	r1, r0
 80027de:	b2d3      	uxtb	r3, r2
 80027e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80027e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	0c0a      	lsrs	r2, r1, #16
 80027f0:	2300      	movs	r3, #0
 80027f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f4:	3106      	adds	r1, #6
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	4401      	add	r1, r0
 80027fa:	b2d3      	uxtb	r3, r2
 80027fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80027fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	0e0a      	lsrs	r2, r1, #24
 800280c:	2300      	movs	r3, #0
 800280e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002810:	3107      	adds	r1, #7
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	4401      	add	r1, r0
 8002816:	b2d3      	uxtb	r3, r2
 8002818:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	3308      	adds	r3, #8
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002826:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800282a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800282e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	4401      	add	r1, r0
 8002834:	b2d3      	uxtb	r3, r2
 8002836:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002838:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	0a02      	lsrs	r2, r0, #8
 8002846:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800284a:	0a0b      	lsrs	r3, r1, #8
 800284c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284e:	3101      	adds	r1, #1
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	4401      	add	r1, r0
 8002854:	b2d3      	uxtb	r3, r2
 8002856:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002858:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	0c02      	lsrs	r2, r0, #16
 8002866:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800286a:	0c0b      	lsrs	r3, r1, #16
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	3102      	adds	r1, #2
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	4401      	add	r1, r0
 8002874:	b2d3      	uxtb	r3, r2
 8002876:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	0e02      	lsrs	r2, r0, #24
 8002886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288a:	0e0b      	lsrs	r3, r1, #24
 800288c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288e:	3103      	adds	r1, #3
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	4401      	add	r1, r0
 8002894:	b2d3      	uxtb	r3, r2
 8002896:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002898:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	000a      	movs	r2, r1
 80028a6:	2300      	movs	r3, #0
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	3104      	adds	r1, #4
 80028ac:	6838      	ldr	r0, [r7, #0]
 80028ae:	4401      	add	r1, r0
 80028b0:	b2d3      	uxtb	r3, r2
 80028b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80028b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	0a0a      	lsrs	r2, r1, #8
 80028c2:	2300      	movs	r3, #0
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	3105      	adds	r1, #5
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	4401      	add	r1, r0
 80028cc:	b2d3      	uxtb	r3, r2
 80028ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80028d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	0c0a      	lsrs	r2, r1, #16
 80028de:	2300      	movs	r3, #0
 80028e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e2:	3106      	adds	r1, #6
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	4401      	add	r1, r0
 80028e8:	b2d3      	uxtb	r3, r2
 80028ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80028ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	0e0a      	lsrs	r2, r1, #24
 80028fa:	2300      	movs	r3, #0
 80028fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fe:	3107      	adds	r1, #7
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	4401      	add	r1, r0
 8002904:	b2d3      	uxtb	r3, r2
 8002906:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3308      	adds	r3, #8
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002914:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	4401      	add	r1, r0
 8002922:	b2d3      	uxtb	r3, r2
 8002924:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	0a02      	lsrs	r2, r0, #8
 8002934:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002938:	0a0b      	lsrs	r3, r1, #8
 800293a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293c:	3101      	adds	r1, #1
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	4401      	add	r1, r0
 8002942:	b2d3      	uxtb	r3, r2
 8002944:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	0c02      	lsrs	r2, r0, #16
 8002954:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002958:	0c0b      	lsrs	r3, r1, #16
 800295a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295c:	3102      	adds	r1, #2
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	4401      	add	r1, r0
 8002962:	b2d3      	uxtb	r3, r2
 8002964:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	0e02      	lsrs	r2, r0, #24
 8002974:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002978:	0e0b      	lsrs	r3, r1, #24
 800297a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297c:	3103      	adds	r1, #3
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	4401      	add	r1, r0
 8002982:	b2d3      	uxtb	r3, r2
 8002984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	000a      	movs	r2, r1
 8002994:	2300      	movs	r3, #0
 8002996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002998:	3104      	adds	r1, #4
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	4401      	add	r1, r0
 800299e:	b2d3      	uxtb	r3, r2
 80029a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80029a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	0a0a      	lsrs	r2, r1, #8
 80029b0:	2300      	movs	r3, #0
 80029b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b4:	3105      	adds	r1, #5
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	4401      	add	r1, r0
 80029ba:	b2d3      	uxtb	r3, r2
 80029bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80029be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	0c0a      	lsrs	r2, r1, #16
 80029cc:	2300      	movs	r3, #0
 80029ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d0:	3106      	adds	r1, #6
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	4401      	add	r1, r0
 80029d6:	b2d3      	uxtb	r3, r2
 80029d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80029da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	0e0a      	lsrs	r2, r1, #24
 80029e8:	2300      	movs	r3, #0
 80029ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ec:	3107      	adds	r1, #7
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	4401      	add	r1, r0
 80029f2:	b2d3      	uxtb	r3, r2
 80029f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	3308      	adds	r3, #8
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029fe:	4618      	mov	r0, r3
 8002a00:	372c      	adds	r7, #44	; 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a0a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a0e:	b0eb      	sub	sp, #428	; 0x1ac
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002a16:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a30:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	461c      	mov	r4, r3
 8002a42:	4615      	mov	r5, r2
 8002a44:	ea40 0804 	orr.w	r8, r0, r4
 8002a48:	ea41 0905 	orr.w	r9, r1, r5
 8002a4c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	469a      	mov	sl, r3
 8002a68:	4693      	mov	fp, r2
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a76:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a7a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a7e:	ea40 0402 	orr.w	r4, r0, r2
 8002a82:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a8c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a90:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a94:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002aae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002abe:	464c      	mov	r4, r9
 8002ac0:	0423      	lsls	r3, r4, #16
 8002ac2:	4644      	mov	r4, r8
 8002ac4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ac8:	4644      	mov	r4, r8
 8002aca:	0422      	lsls	r2, r4, #16
 8002acc:	ea40 0402 	orr.w	r4, r0, r2
 8002ad0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002ada:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002ade:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ae2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ae6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aea:	1cda      	adds	r2, r3, #3
 8002aec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002afc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002b00:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002b04:	4623      	mov	r3, r4
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b14:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002b18:	4623      	mov	r3, r4
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b20:	462b      	mov	r3, r5
 8002b22:	430b      	orrs	r3, r1
 8002b24:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b28:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002b2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002b4a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	ea40 0402 	orr.w	r4, r0, r2
 8002b62:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b6c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002b70:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d5a      	adds	r2, r3, #5
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b8e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002b9e:	0223      	lsls	r3, r4, #8
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002bb0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002bb4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d9a      	adds	r2, r3, #6
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bd2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002be2:	0423      	lsls	r3, r4, #16
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bf4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002bf8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002bfc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1dda      	adds	r2, r3, #7
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002c16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002c26:	0623      	lsls	r3, r4, #24
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c38:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002c3c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002c40:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c48:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c50:	3308      	adds	r3, #8
 8002c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c62:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c66:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c7a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c7e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c82:	4623      	mov	r3, r4
 8002c84:	4303      	orrs	r3, r0
 8002c86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c92:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c96:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c9a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002cb4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002cc4:	464c      	mov	r4, r9
 8002cc6:	0223      	lsls	r3, r4, #8
 8002cc8:	4644      	mov	r4, r8
 8002cca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cce:	4644      	mov	r4, r8
 8002cd0:	0222      	lsls	r2, r4, #8
 8002cd2:	ea40 0402 	orr.w	r4, r0, r2
 8002cd6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ce0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ce4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ce8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf0:	1c9a      	adds	r2, r3, #2
 8002cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002d12:	464c      	mov	r4, r9
 8002d14:	0423      	lsls	r3, r4, #16
 8002d16:	4644      	mov	r4, r8
 8002d18:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d1c:	4644      	mov	r4, r8
 8002d1e:	0422      	lsls	r2, r4, #16
 8002d20:	ea40 0402 	orr.w	r4, r0, r2
 8002d24:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d2e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002d32:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d3e:	1cda      	adds	r2, r3, #3
 8002d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d44:	4413      	add	r3, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d50:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d54:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002d58:	4623      	mov	r3, r4
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d60:	4623      	mov	r3, r4
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d68:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	4303      	orrs	r3, r0
 8002d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d74:	462b      	mov	r3, r5
 8002d76:	430b      	orrs	r3, r1
 8002d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d7c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d8c:	1d1a      	adds	r2, r3, #4
 8002d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d9e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002dae:	0023      	movs	r3, r4
 8002db0:	2200      	movs	r2, #0
 8002db2:	ea40 0402 	orr.w	r4, r0, r2
 8002db6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dc0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002dc4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002dc8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dd0:	1d5a      	adds	r2, r3, #5
 8002dd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002df2:	0223      	lsls	r3, r4, #8
 8002df4:	2200      	movs	r2, #0
 8002df6:	ea40 0402 	orr.w	r4, r0, r2
 8002dfa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e04:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002e08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e14:	1d9a      	adds	r2, r3, #6
 8002e16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002e36:	0423      	lsls	r3, r4, #16
 8002e38:	2200      	movs	r2, #0
 8002e3a:	ea40 0402 	orr.w	r4, r0, r2
 8002e3e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002e42:	430b      	orrs	r3, r1
 8002e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e48:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002e4c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e50:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e58:	1dda      	adds	r2, r3, #7
 8002e5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e86:	430b      	orrs	r3, r1
 8002e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e8c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e94:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e98:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e9c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002ea0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eb6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ebe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ece:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ed2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	4303      	orrs	r3, r0
 8002eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002edc:	462b      	mov	r3, r5
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ee2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002ee6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	673b      	str	r3, [r7, #112]	; 0x70
 8002f02:	677a      	str	r2, [r7, #116]	; 0x74
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f10:	464c      	mov	r4, r9
 8002f12:	0223      	lsls	r3, r4, #8
 8002f14:	4644      	mov	r4, r8
 8002f16:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f1a:	4644      	mov	r4, r8
 8002f1c:	0222      	lsls	r2, r4, #8
 8002f1e:	ea40 0402 	orr.w	r4, r0, r2
 8002f22:	66bc      	str	r4, [r7, #104]	; 0x68
 8002f24:	430b      	orrs	r3, r1
 8002f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f28:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002f2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f30:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f3e:	4413      	add	r3, r2
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	663b      	str	r3, [r7, #96]	; 0x60
 8002f48:	667a      	str	r2, [r7, #100]	; 0x64
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f56:	464c      	mov	r4, r9
 8002f58:	0423      	lsls	r3, r4, #16
 8002f5a:	4644      	mov	r4, r8
 8002f5c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f60:	4644      	mov	r4, r8
 8002f62:	0422      	lsls	r2, r4, #16
 8002f64:	ea40 0402 	orr.w	r4, r0, r2
 8002f68:	65bc      	str	r4, [r7, #88]	; 0x58
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002f72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7e:	1cda      	adds	r2, r3, #3
 8002f80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f8e:	657a      	str	r2, [r7, #84]	; 0x54
 8002f90:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f94:	4623      	mov	r3, r4
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	4303      	orrs	r3, r0
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8002faa:	462b      	mov	r3, r5
 8002fac:	430b      	orrs	r3, r1
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002fb4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fb8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc0:	1d1a      	adds	r2, r3, #4
 8002fc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fdc:	0023      	movs	r3, r4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	ea40 0402 	orr.w	r4, r0, r2
 8002fe4:	633c      	str	r4, [r7, #48]	; 0x30
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002fee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ff2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ff6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ffa:	1d5a      	adds	r2, r3, #5
 8002ffc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003016:	0223      	lsls	r3, r4, #8
 8003018:	2200      	movs	r2, #0
 800301a:	ea40 0402 	orr.w	r4, r0, r2
 800301e:	623c      	str	r4, [r7, #32]
 8003020:	430b      	orrs	r3, r1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003028:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800302c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003030:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003034:	3306      	adds	r3, #6
 8003036:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2200      	movs	r2, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	69bc      	ldr	r4, [r7, #24]
 8003050:	0423      	lsls	r3, r4, #16
 8003052:	2200      	movs	r2, #0
 8003054:	ea40 0402 	orr.w	r4, r0, r2
 8003058:	613c      	str	r4, [r7, #16]
 800305a:	430b      	orrs	r3, r1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003062:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003066:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800306a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800306e:	3307      	adds	r3, #7
 8003070:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2200      	movs	r2, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	68bc      	ldr	r4, [r7, #8]
 800308a:	0623      	lsls	r3, r4, #24
 800308c:	2200      	movs	r2, #0
 800308e:	ea40 0402 	orr.w	r4, r0, r2
 8003092:	603c      	str	r4, [r7, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	e9d7 3400 	ldrd	r3, r4, [r7]
 800309c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80030a0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80030a4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80030a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80030ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b0:	3308      	adds	r3, #8
 80030b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80030b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80030ba:	4618      	mov	r0, r3
 80030bc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030c6:	4770      	bx	lr

080030c8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	08009154 	.word	0x08009154

080030e4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	0800916c 	.word	0x0800916c

08003100 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f984 	bl	8001418 <_ZN3ros3MsgC1Ev>
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3308      	adds	r3, #8
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fada 	bl	80026d4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3328      	adds	r3, #40	; 0x28
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fad5 	bl	80026d4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	08009264 	.word	0x08009264

08003138 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f103 0008 	add.w	r0, r3, #8
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4413      	add	r3, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff fae6 	bl	8002724 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f7ff fad9 	bl	8002724 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
      return offset;
 800317a:	68fb      	ldr	r3, [r7, #12]
    }
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 0008 	add.w	r0, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f7ff fc33 	bl	8002a0a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7ff fc26 	bl	8002a0a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
     return offset;
 80031c6:	68fb      	ldr	r3, [r7, #12]
    }
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	08009190 	.word	0x08009190

080031ec <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	080091a4 	.word	0x080091a4

08003208 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	080092c4 	.word	0x080092c4

08003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ffe8 	bl	8003208 <_ZN3ros15NodeHandleBase_C1Ev>
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ff72 	bl	800212c <_ZN13STM32HardwareC1Ev>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800326e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f005 fd51 	bl	8008d1c <memset>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f005 fd48 	bl	8008d1c <memset>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003292:	2264      	movs	r2, #100	; 0x64
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f005 fd40 	bl	8008d1c <memset>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80032a2:	2264      	movs	r2, #100	; 0x64
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f005 fd38 	bl	8008d1c <memset>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fbfc 	bl	8001b00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	08009250 	.word	0x08009250

08003318 <_Z10rpm_to_mpsdd>:
double alpha2, beta2;
double u21, u22;
int time_parameter = 0;

double rpm_to_mps(double rpm, double R)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003322:	ed87 1b00 	vstr	d1, [r7]
	return rpm*2*M_PI*R/60;
 8003326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	f7fc ff59 	bl	80001e4 <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	a312      	add	r3, pc, #72	; (adr r3, 8003384 <_Z10rpm_to_mpsdd+0x6c>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f906 	bl	8000550 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003350:	f7fd f8fe 	bl	8000550 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_Z10rpm_to_mpsdd+0x68>)
 8003362:	f7fd fa1f 	bl	80007a4 <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	ec43 2b17 	vmov	d7, r2, r3
}
 800336e:	eeb0 0a47 	vmov.f32	s0, s14
 8003372:	eef0 0a67 	vmov.f32	s1, s15
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	f3af 8000 	nop.w
 8003380:	404e0000 	.word	0x404e0000
 8003384:	54442d18 	.word	0x54442d18
 8003388:	400921fb 	.word	0x400921fb
 800338c:	00000000 	.word	0x00000000

08003390 <_Z10mps_to_rpmdd>:

double mps_to_rpm(double mps, double R)
{
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	ed87 0b02 	vstr	d0, [r7, #8]
 800339a:	ed87 1b00 	vstr	d1, [r7]
	return 60*mps/(2*M_PI*R);
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <_Z10mps_to_rpmdd+0x60>)
 80033a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a8:	f7fd f8d2 	bl	8000550 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	a30c      	add	r3, pc, #48	; (adr r3, 80033e8 <_Z10mps_to_rpmdd+0x58>)
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033be:	f7fd f8c7 	bl	8000550 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fd f9eb 	bl	80007a4 <__aeabi_ddiv>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80033d6:	eeb0 0a47 	vmov.f32	s0, s14
 80033da:	eef0 0a67 	vmov.f32	s1, s15
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	f3af 8000 	nop.w
 80033e8:	54442d18 	.word	0x54442d18
 80033ec:	401921fb 	.word	0x401921fb
 80033f0:	404e0000 	.word	0x404e0000
 80033f4:	00000000 	.word	0x00000000

080033f8 <_Z4_runv>:

void _run(void)
{
 80033f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	af00      	add	r7, sp, #0
	// Left wheel
	N1 = __HAL_TIM_GET_COUNTER(&htim1);
 80033fe:	4bc0      	ldr	r3, [pc, #768]	; (8003700 <_Z4_runv+0x308>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	b21a      	sxth	r2, r3
 8003406:	4bbf      	ldr	r3, [pc, #764]	; (8003704 <_Z4_runv+0x30c>)
 8003408:	801a      	strh	r2, [r3, #0]
	if(abs((int)(N1 - preN1)) < 40000) y13 = ((N1 - preN1)*60.0*100/4000);
 800340a:	4bbe      	ldr	r3, [pc, #760]	; (8003704 <_Z4_runv+0x30c>)
 800340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003410:	461a      	mov	r2, r3
 8003412:	4bbd      	ldr	r3, [pc, #756]	; (8003708 <_Z4_runv+0x310>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	425b      	neglt	r3, r3
 8003420:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003424:	4293      	cmp	r3, r2
 8003426:	dc26      	bgt.n	8003476 <_Z4_runv+0x7e>
 8003428:	4bb6      	ldr	r3, [pc, #728]	; (8003704 <_Z4_runv+0x30c>)
 800342a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342e:	461a      	mov	r2, r3
 8003430:	4bb5      	ldr	r3, [pc, #724]	; (8003708 <_Z4_runv+0x310>)
 8003432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f81f 	bl	800047c <__aeabi_i2d>
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	4bb2      	ldr	r3, [pc, #712]	; (800370c <_Z4_runv+0x314>)
 8003444:	f7fd f884 	bl	8000550 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	4bae      	ldr	r3, [pc, #696]	; (8003710 <_Z4_runv+0x318>)
 8003456:	f7fd f87b 	bl	8000550 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	4bab      	ldr	r3, [pc, #684]	; (8003714 <_Z4_runv+0x31c>)
 8003468:	f7fd f99c 	bl	80007a4 <__aeabi_ddiv>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	49a9      	ldr	r1, [pc, #676]	; (8003718 <_Z4_runv+0x320>)
 8003472:	e9c1 2300 	strd	r2, r3, [r1]
//	y13 = 20;
	y11.data = 0.9753*y12 + 0.02469*y14;
 8003476:	4ba9      	ldr	r3, [pc, #676]	; (800371c <_Z4_runv+0x324>)
 8003478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347c:	a38e      	add	r3, pc, #568	; (adr r3, 80036b8 <_Z4_runv+0x2c0>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f865 	bl	8000550 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4692      	mov	sl, r2
 800348c:	469b      	mov	fp, r3
 800348e:	4ba4      	ldr	r3, [pc, #656]	; (8003720 <_Z4_runv+0x328>)
 8003490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003494:	a38a      	add	r3, pc, #552	; (adr r3, 80036c0 <_Z4_runv+0x2c8>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fd f859 	bl	8000550 <__aeabi_dmul>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4650      	mov	r0, sl
 80034a4:	4659      	mov	r1, fp
 80034a6:	f7fc fe9d 	bl	80001e4 <__adddf3>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	499d      	ldr	r1, [pc, #628]	; (8003724 <_Z4_runv+0x32c>)
 80034b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	y12 = y11.data; y14 = y13;
 80034b4:	4b9b      	ldr	r3, [pc, #620]	; (8003724 <_Z4_runv+0x32c>)
 80034b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034ba:	4998      	ldr	r1, [pc, #608]	; (800371c <_Z4_runv+0x324>)
 80034bc:	e9c1 2300 	strd	r2, r3, [r1]
 80034c0:	4b95      	ldr	r3, [pc, #596]	; (8003718 <_Z4_runv+0x320>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	4996      	ldr	r1, [pc, #600]	; (8003720 <_Z4_runv+0x328>)
 80034c8:	e9c1 2300 	strd	r2, r3, [r1]
	preN1 = N1;
 80034cc:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <_Z4_runv+0x30c>)
 80034ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034d2:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <_Z4_runv+0x310>)
 80034d4:	801a      	strh	r2, [r3, #0]
	y11_lin.data = rpm_to_mps(y11.data, R);
 80034d6:	4b93      	ldr	r3, [pc, #588]	; (8003724 <_Z4_runv+0x32c>)
 80034d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80034dc:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 80036c8 <_Z4_runv+0x2d0>
 80034e0:	eeb0 0a47 	vmov.f32	s0, s14
 80034e4:	eef0 0a67 	vmov.f32	s1, s15
 80034e8:	f7ff ff16 	bl	8003318 <_Z10rpm_to_mpsdd>
 80034ec:	eeb0 7a40 	vmov.f32	s14, s0
 80034f0:	eef0 7a60 	vmov.f32	s15, s1
 80034f4:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <_Z4_runv+0x330>)
 80034f6:	ed83 7b02 	vstr	d7, [r3, #8]
	ec11 = set1_ang.data - y11.data;
 80034fa:	4b8c      	ldr	r3, [pc, #560]	; (800372c <_Z4_runv+0x334>)
 80034fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003500:	4b88      	ldr	r3, [pc, #544]	; (8003724 <_Z4_runv+0x32c>)
 8003502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003506:	f7fc fe6b 	bl	80001e0 <__aeabi_dsub>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4988      	ldr	r1, [pc, #544]	; (8003730 <_Z4_runv+0x338>)
 8003510:	e9c1 2300 	strd	r2, r3, [r1]
	ym11 = 0.00122*set1_ang.data + 0.00078*set1_ang.data + 1.921*ym12 - 0.923*ym13;
 8003514:	4b85      	ldr	r3, [pc, #532]	; (800372c <_Z4_runv+0x334>)
 8003516:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800351a:	a36d      	add	r3, pc, #436	; (adr r3, 80036d0 <_Z4_runv+0x2d8>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f7fd f816 	bl	8000550 <__aeabi_dmul>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4692      	mov	sl, r2
 800352a:	469b      	mov	fp, r3
 800352c:	4b7f      	ldr	r3, [pc, #508]	; (800372c <_Z4_runv+0x334>)
 800352e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003532:	a369      	add	r3, pc, #420	; (adr r3, 80036d8 <_Z4_runv+0x2e0>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f80a 	bl	8000550 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4650      	mov	r0, sl
 8003542:	4659      	mov	r1, fp
 8003544:	f7fc fe4e 	bl	80001e4 <__adddf3>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4692      	mov	sl, r2
 800354e:	469b      	mov	fp, r3
 8003550:	4b78      	ldr	r3, [pc, #480]	; (8003734 <_Z4_runv+0x33c>)
 8003552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003556:	a362      	add	r3, pc, #392	; (adr r3, 80036e0 <_Z4_runv+0x2e8>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc fff8 	bl	8000550 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4650      	mov	r0, sl
 8003566:	4659      	mov	r1, fp
 8003568:	f7fc fe3c 	bl	80001e4 <__adddf3>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4692      	mov	sl, r2
 8003572:	469b      	mov	fp, r3
 8003574:	4b70      	ldr	r3, [pc, #448]	; (8003738 <_Z4_runv+0x340>)
 8003576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357a:	a35b      	add	r3, pc, #364	; (adr r3, 80036e8 <_Z4_runv+0x2f0>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fc ffe6 	bl	8000550 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4650      	mov	r0, sl
 800358a:	4659      	mov	r1, fp
 800358c:	f7fc fe28 	bl	80001e0 <__aeabi_dsub>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4969      	ldr	r1, [pc, #420]	; (800373c <_Z4_runv+0x344>)
 8003596:	e9c1 2300 	strd	r2, r3, [r1]
	em11 = y11.data - ym11;
 800359a:	4b62      	ldr	r3, [pc, #392]	; (8003724 <_Z4_runv+0x32c>)
 800359c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <_Z4_runv+0x344>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fc fe1b 	bl	80001e0 <__aeabi_dsub>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4964      	ldr	r1, [pc, #400]	; (8003740 <_Z4_runv+0x348>)
 80035b0:	e9c1 2300 	strd	r2, r3, [r1]
	delkp11 = 1.921*delkp12 - 0.923*delkp13 + 0.07685*ec12 - 0.07685*ec13;
 80035b4:	4b63      	ldr	r3, [pc, #396]	; (8003744 <_Z4_runv+0x34c>)
 80035b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ba:	a349      	add	r3, pc, #292	; (adr r3, 80036e0 <_Z4_runv+0x2e8>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fc ffc6 	bl	8000550 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4692      	mov	sl, r2
 80035ca:	469b      	mov	fp, r3
 80035cc:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <_Z4_runv+0x350>)
 80035ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d2:	a345      	add	r3, pc, #276	; (adr r3, 80036e8 <_Z4_runv+0x2f0>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f7fc ffba 	bl	8000550 <__aeabi_dmul>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4650      	mov	r0, sl
 80035e2:	4659      	mov	r1, fp
 80035e4:	f7fc fdfc 	bl	80001e0 <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4692      	mov	sl, r2
 80035ee:	469b      	mov	fp, r3
 80035f0:	4b56      	ldr	r3, [pc, #344]	; (800374c <_Z4_runv+0x354>)
 80035f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f6:	a33e      	add	r3, pc, #248	; (adr r3, 80036f0 <_Z4_runv+0x2f8>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fc ffa8 	bl	8000550 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4650      	mov	r0, sl
 8003606:	4659      	mov	r1, fp
 8003608:	f7fc fdec 	bl	80001e4 <__adddf3>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4692      	mov	sl, r2
 8003612:	469b      	mov	fp, r3
 8003614:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <_Z4_runv+0x358>)
 8003616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361a:	a335      	add	r3, pc, #212	; (adr r3, 80036f0 <_Z4_runv+0x2f8>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ff96 	bl	8000550 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4650      	mov	r0, sl
 800362a:	4659      	mov	r1, fp
 800362c:	f7fc fdd8 	bl	80001e0 <__aeabi_dsub>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4947      	ldr	r1, [pc, #284]	; (8003754 <_Z4_runv+0x35c>)
 8003636:	e9c1 2300 	strd	r2, r3, [r1]
	Kp1 += -gammap1*em11*delkp11;
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <_Z4_runv+0x348>)
 800363c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003640:	a32d      	add	r3, pc, #180	; (adr r3, 80036f8 <_Z4_runv+0x300>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc ff83 	bl	8000550 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <_Z4_runv+0x35c>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fc ff7a 	bl	8000550 <__aeabi_dmul>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	4b3c      	ldr	r3, [pc, #240]	; (8003758 <_Z4_runv+0x360>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc fdbb 	bl	80001e4 <__adddf3>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4939      	ldr	r1, [pc, #228]	; (8003758 <_Z4_runv+0x360>)
 8003674:	e9c1 2300 	strd	r2, r3, [r1]
	delki11 = 1.921*delki12 - 0.923*delki13 + 0.00039*ec12 + 0.00025*ec13;
 8003678:	4b38      	ldr	r3, [pc, #224]	; (800375c <_Z4_runv+0x364>)
 800367a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800367e:	a318      	add	r3, pc, #96	; (adr r3, 80036e0 <_Z4_runv+0x2e8>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ff64 	bl	8000550 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4692      	mov	sl, r2
 800368e:	469b      	mov	fp, r3
 8003690:	4b33      	ldr	r3, [pc, #204]	; (8003760 <_Z4_runv+0x368>)
 8003692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003696:	a314      	add	r3, pc, #80	; (adr r3, 80036e8 <_Z4_runv+0x2f0>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc ff58 	bl	8000550 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4650      	mov	r0, sl
 80036a6:	4659      	mov	r1, fp
 80036a8:	f7fc fd9a 	bl	80001e0 <__aeabi_dsub>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4692      	mov	sl, r2
 80036b2:	e057      	b.n	8003764 <_Z4_runv+0x36c>
 80036b4:	f3af 8000 	nop.w
 80036b8:	58793dd9 	.word	0x58793dd9
 80036bc:	3fef35a8 	.word	0x3fef35a8
 80036c0:	da272863 	.word	0xda272863
 80036c4:	3f994855 	.word	0x3f994855
 80036c8:	cccccccd 	.word	0xcccccccd
 80036cc:	3fc4cccc 	.word	0x3fc4cccc
 80036d0:	0678c005 	.word	0x0678c005
 80036d4:	3f53fd0d 	.word	0x3f53fd0d
 80036d8:	3ed527e5 	.word	0x3ed527e5
 80036dc:	3f498f1d 	.word	0x3f498f1d
 80036e0:	7ef9db23 	.word	0x7ef9db23
 80036e4:	3ffebc6a 	.word	0x3ffebc6a
 80036e8:	4bc6a7f0 	.word	0x4bc6a7f0
 80036ec:	3fed8937 	.word	0x3fed8937
 80036f0:	0cb295ea 	.word	0x0cb295ea
 80036f4:	3fb3ac71 	.word	0x3fb3ac71
 80036f8:	eb1c432d 	.word	0xeb1c432d
 80036fc:	bf0a36e2 	.word	0xbf0a36e2
 8003700:	20000094 	.word	0x20000094
 8003704:	20000ce0 	.word	0x20000ce0
 8003708:	20000ce2 	.word	0x20000ce2
 800370c:	404e0000 	.word	0x404e0000
 8003710:	40590000 	.word	0x40590000
 8003714:	40af4000 	.word	0x40af4000
 8003718:	20000cf0 	.word	0x20000cf0
 800371c:	20000ce8 	.word	0x20000ce8
 8003720:	20000cf8 	.word	0x20000cf8
 8003724:	20000ca0 	.word	0x20000ca0
 8003728:	20000cc0 	.word	0x20000cc0
 800372c:	20000c60 	.word	0x20000c60
 8003730:	20000d18 	.word	0x20000d18
 8003734:	20000d08 	.word	0x20000d08
 8003738:	20000d10 	.word	0x20000d10
 800373c:	20000d00 	.word	0x20000d00
 8003740:	20000d30 	.word	0x20000d30
 8003744:	20000d50 	.word	0x20000d50
 8003748:	20000d58 	.word	0x20000d58
 800374c:	20000d20 	.word	0x20000d20
 8003750:	20000d28 	.word	0x20000d28
 8003754:	20000d48 	.word	0x20000d48
 8003758:	20000d78 	.word	0x20000d78
 800375c:	20000d68 	.word	0x20000d68
 8003760:	20000d70 	.word	0x20000d70
 8003764:	469b      	mov	fp, r3
 8003766:	4b68      	ldr	r3, [pc, #416]	; (8003908 <_Z4_runv+0x510>)
 8003768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800376c:	a35e      	add	r3, pc, #376	; (adr r3, 80038e8 <_Z4_runv+0x4f0>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc feed 	bl	8000550 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4650      	mov	r0, sl
 800377c:	4659      	mov	r1, fp
 800377e:	f7fc fd31 	bl	80001e4 <__adddf3>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4692      	mov	sl, r2
 8003788:	469b      	mov	fp, r3
 800378a:	4b60      	ldr	r3, [pc, #384]	; (800390c <_Z4_runv+0x514>)
 800378c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003790:	a357      	add	r3, pc, #348	; (adr r3, 80038f0 <_Z4_runv+0x4f8>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f7fc fedb 	bl	8000550 <__aeabi_dmul>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4650      	mov	r0, sl
 80037a0:	4659      	mov	r1, fp
 80037a2:	f7fc fd1f 	bl	80001e4 <__adddf3>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4959      	ldr	r1, [pc, #356]	; (8003910 <_Z4_runv+0x518>)
 80037ac:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 += -gammai1*em11*delki11;
 80037b0:	4b58      	ldr	r3, [pc, #352]	; (8003914 <_Z4_runv+0x51c>)
 80037b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b6:	a350      	add	r3, pc, #320	; (adr r3, 80038f8 <_Z4_runv+0x500>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc fec8 	bl	8000550 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	4b51      	ldr	r3, [pc, #324]	; (8003910 <_Z4_runv+0x518>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f7fc febf 	bl	8000550 <__aeabi_dmul>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <_Z4_runv+0x520>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc fd00 	bl	80001e4 <__adddf3>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	494b      	ldr	r1, [pc, #300]	; (8003918 <_Z4_runv+0x520>)
 80037ea:	e9c1 2300 	strd	r2, r3, [r1]

	alpha1 = Kp1*(ec11 - ec12);
 80037ee:	4b4b      	ldr	r3, [pc, #300]	; (800391c <_Z4_runv+0x524>)
 80037f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <_Z4_runv+0x510>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc fcf1 	bl	80001e0 <__aeabi_dsub>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <_Z4_runv+0x528>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fea0 	bl	8000550 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4943      	ldr	r1, [pc, #268]	; (8003924 <_Z4_runv+0x52c>)
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
	beta1 = T/2*Ki1*(ec11 + ec12);
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <_Z4_runv+0x520>)
 800381c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003820:	a337      	add	r3, pc, #220	; (adr r3, 8003900 <_Z4_runv+0x508>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fe93 	bl	8000550 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4692      	mov	sl, r2
 8003830:	469b      	mov	fp, r3
 8003832:	4b3a      	ldr	r3, [pc, #232]	; (800391c <_Z4_runv+0x524>)
 8003834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003838:	4b33      	ldr	r3, [pc, #204]	; (8003908 <_Z4_runv+0x510>)
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f7fc fcd1 	bl	80001e4 <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4650      	mov	r0, sl
 8003848:	4659      	mov	r1, fp
 800384a:	f7fc fe81 	bl	8000550 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4935      	ldr	r1, [pc, #212]	; (8003928 <_Z4_runv+0x530>)
 8003854:	e9c1 2300 	strd	r2, r3, [r1]
	u11 = u12 + alpha1 + beta1;
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <_Z4_runv+0x534>)
 800385a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800385e:	4b31      	ldr	r3, [pc, #196]	; (8003924 <_Z4_runv+0x52c>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fcbe 	bl	80001e4 <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <_Z4_runv+0x530>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc fcb5 	bl	80001e4 <__adddf3>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	492c      	ldr	r1, [pc, #176]	; (8003930 <_Z4_runv+0x538>)
 8003880:	e9c1 2300 	strd	r2, r3, [r1]

	if(u11 < 0)
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <_Z4_runv+0x538>)
 8003886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	f7fd f8cf 	bl	8000a34 <__aeabi_dcmplt>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d051      	beq.n	8003940 <_Z4_runv+0x548>
		{
			if (u11<-90) u11 = -90;
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <_Z4_runv+0x538>)
 800389e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <_Z4_runv+0x53c>)
 80038a8:	f7fd f8c4 	bl	8000a34 <__aeabi_dcmplt>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <_Z4_runv+0x4c6>
 80038b2:	491f      	ldr	r1, [pc, #124]	; (8003930 <_Z4_runv+0x538>)
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <_Z4_runv+0x53c>)
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80038be:	2201      	movs	r2, #1
 80038c0:	2101      	movs	r1, #1
 80038c2:	481d      	ldr	r0, [pc, #116]	; (8003938 <_Z4_runv+0x540>)
 80038c4:	f002 fd48 	bl	8006358 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, -u11);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <_Z4_runv+0x538>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	4690      	mov	r8, r2
 80038d0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <_Z4_runv+0x544>)
 80038d6:	681e      	ldr	r6, [r3, #0]
 80038d8:	4640      	mov	r0, r8
 80038da:	4649      	mov	r1, r9
 80038dc:	f7fd f8d2 	bl	8000a84 <__aeabi_d2uiz>
 80038e0:	4603      	mov	r3, r0
 80038e2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80038e4:	e04d      	b.n	8003982 <_Z4_runv+0x58a>
 80038e6:	bf00      	nop
 80038e8:	3ed527e5 	.word	0x3ed527e5
 80038ec:	3f398f1d 	.word	0x3f398f1d
 80038f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80038f4:	3f30624d 	.word	0x3f30624d
 80038f8:	eb1c432d 	.word	0xeb1c432d
 80038fc:	bf0a36e2 	.word	0xbf0a36e2
 8003900:	47ae147b 	.word	0x47ae147b
 8003904:	3f747ae1 	.word	0x3f747ae1
 8003908:	20000d20 	.word	0x20000d20
 800390c:	20000d28 	.word	0x20000d28
 8003910:	20000d60 	.word	0x20000d60
 8003914:	20000d30 	.word	0x20000d30
 8003918:	20000d80 	.word	0x20000d80
 800391c:	20000d18 	.word	0x20000d18
 8003920:	20000d78 	.word	0x20000d78
 8003924:	20000d88 	.word	0x20000d88
 8003928:	20000d90 	.word	0x20000d90
 800392c:	20000da0 	.word	0x20000da0
 8003930:	20000d98 	.word	0x20000d98
 8003934:	c0568000 	.word	0xc0568000
 8003938:	40020800 	.word	0x40020800
 800393c:	200000dc 	.word	0x200000dc

		}
		else
		{
			if (u11>=90) u11 = 90;
 8003940:	4ba9      	ldr	r3, [pc, #676]	; (8003be8 <_Z4_runv+0x7f0>)
 8003942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	4ba8      	ldr	r3, [pc, #672]	; (8003bec <_Z4_runv+0x7f4>)
 800394c:	f7fd f886 	bl	8000a5c <__aeabi_dcmpge>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <_Z4_runv+0x56a>
 8003956:	49a4      	ldr	r1, [pc, #656]	; (8003be8 <_Z4_runv+0x7f0>)
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	4ba3      	ldr	r3, [pc, #652]	; (8003bec <_Z4_runv+0x7f4>)
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8003962:	2200      	movs	r2, #0
 8003964:	2101      	movs	r1, #1
 8003966:	48a2      	ldr	r0, [pc, #648]	; (8003bf0 <_Z4_runv+0x7f8>)
 8003968:	f002 fcf6 	bl	8006358 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, u11);
 800396c:	4b9e      	ldr	r3, [pc, #632]	; (8003be8 <_Z4_runv+0x7f0>)
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	49a0      	ldr	r1, [pc, #640]	; (8003bf4 <_Z4_runv+0x7fc>)
 8003974:	680e      	ldr	r6, [r1, #0]
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f883 	bl	8000a84 <__aeabi_d2uiz>
 800397e:	4603      	mov	r3, r0
 8003980:	63f3      	str	r3, [r6, #60]	; 0x3c

		}

		if(set1_ang.data == 0) u11 = 0;
 8003982:	4b9d      	ldr	r3, [pc, #628]	; (8003bf8 <_Z4_runv+0x800>)
 8003984:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f7fd f846 	bl	8000a20 <__aeabi_dcmpeq>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <_Z4_runv+0x5b0>
 800399a:	4993      	ldr	r1, [pc, #588]	; (8003be8 <_Z4_runv+0x7f0>)
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9c1 2300 	strd	r2, r3, [r1]

	u12 = u11;
 80039a8:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <_Z4_runv+0x7f0>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	4993      	ldr	r1, [pc, #588]	; (8003bfc <_Z4_runv+0x804>)
 80039b0:	e9c1 2300 	strd	r2, r3, [r1]
	ec13 = ec12; ec12 = ec11; em13 = em12; em12 = em11;	ym13 = ym12; ym12 = ym11;
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <_Z4_runv+0x808>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	4992      	ldr	r1, [pc, #584]	; (8003c04 <_Z4_runv+0x80c>)
 80039bc:	e9c1 2300 	strd	r2, r3, [r1]
 80039c0:	4b91      	ldr	r3, [pc, #580]	; (8003c08 <_Z4_runv+0x810>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	498e      	ldr	r1, [pc, #568]	; (8003c00 <_Z4_runv+0x808>)
 80039c8:	e9c1 2300 	strd	r2, r3, [r1]
 80039cc:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <_Z4_runv+0x814>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	498f      	ldr	r1, [pc, #572]	; (8003c10 <_Z4_runv+0x818>)
 80039d4:	e9c1 2300 	strd	r2, r3, [r1]
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <_Z4_runv+0x81c>)
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	498b      	ldr	r1, [pc, #556]	; (8003c0c <_Z4_runv+0x814>)
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
 80039e4:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <_Z4_runv+0x820>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	498c      	ldr	r1, [pc, #560]	; (8003c1c <_Z4_runv+0x824>)
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
 80039f0:	4b8b      	ldr	r3, [pc, #556]	; (8003c20 <_Z4_runv+0x828>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	4988      	ldr	r1, [pc, #544]	; (8003c18 <_Z4_runv+0x820>)
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
	delkp13 = delkp12; delkp12 = delkp11; delki13 = delki12; delki12 = delki11;
 80039fc:	4b89      	ldr	r3, [pc, #548]	; (8003c24 <_Z4_runv+0x82c>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	4989      	ldr	r1, [pc, #548]	; (8003c28 <_Z4_runv+0x830>)
 8003a04:	e9c1 2300 	strd	r2, r3, [r1]
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <_Z4_runv+0x834>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	4985      	ldr	r1, [pc, #532]	; (8003c24 <_Z4_runv+0x82c>)
 8003a10:	e9c1 2300 	strd	r2, r3, [r1]
 8003a14:	4b86      	ldr	r3, [pc, #536]	; (8003c30 <_Z4_runv+0x838>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	4986      	ldr	r1, [pc, #536]	; (8003c34 <_Z4_runv+0x83c>)
 8003a1c:	e9c1 2300 	strd	r2, r3, [r1]
 8003a20:	4b85      	ldr	r3, [pc, #532]	; (8003c38 <_Z4_runv+0x840>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	4982      	ldr	r1, [pc, #520]	; (8003c30 <_Z4_runv+0x838>)
 8003a28:	e9c1 2300 	strd	r2, r3, [r1]

	u11_s.data = u11;
 8003a2c:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <_Z4_runv+0x7f0>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	4982      	ldr	r1, [pc, #520]	; (8003c3c <_Z4_runv+0x844>)
 8003a34:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Right wheel
	N2 = __HAL_TIM_GET_COUNTER(&htim3);
 8003a38:	4b81      	ldr	r3, [pc, #516]	; (8003c40 <_Z4_runv+0x848>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <_Z4_runv+0x84c>)
 8003a42:	801a      	strh	r2, [r3, #0]
	if(abs((int)(N2 - preN2)) < 40000) y23 = ((N2 - preN2)*60.0*100/4000);
 8003a44:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <_Z4_runv+0x84c>)
 8003a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <_Z4_runv+0x850>)
 8003a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bfb8      	it	lt
 8003a58:	425b      	neglt	r3, r3
 8003a5a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	dc26      	bgt.n	8003ab0 <_Z4_runv+0x6b8>
 8003a62:	4b78      	ldr	r3, [pc, #480]	; (8003c44 <_Z4_runv+0x84c>)
 8003a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <_Z4_runv+0x850>)
 8003a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd02 	bl	800047c <__aeabi_i2d>
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <_Z4_runv+0x854>)
 8003a7e:	f7fc fd67 	bl	8000550 <__aeabi_dmul>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <_Z4_runv+0x858>)
 8003a90:	f7fc fd5e 	bl	8000550 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <_Z4_runv+0x85c>)
 8003aa2:	f7fc fe7f 	bl	80007a4 <__aeabi_ddiv>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	496b      	ldr	r1, [pc, #428]	; (8003c58 <_Z4_runv+0x860>)
 8003aac:	e9c1 2300 	strd	r2, r3, [r1]
//	y23 = 20;
	y21.data = 0.9753*y22 + 0.02469*y24;
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <_Z4_runv+0x864>)
 8003ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ab6:	a340      	add	r3, pc, #256	; (adr r3, 8003bb8 <_Z4_runv+0x7c0>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fd48 	bl	8000550 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4690      	mov	r8, r2
 8003ac6:	4699      	mov	r9, r3
 8003ac8:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <_Z4_runv+0x868>)
 8003aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ace:	a33c      	add	r3, pc, #240	; (adr r3, 8003bc0 <_Z4_runv+0x7c8>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc fd3c 	bl	8000550 <__aeabi_dmul>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fb80 	bl	80001e4 <__adddf3>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	495e      	ldr	r1, [pc, #376]	; (8003c64 <_Z4_runv+0x86c>)
 8003aea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	y22 = y21.data; y24 = y23;
 8003aee:	4b5d      	ldr	r3, [pc, #372]	; (8003c64 <_Z4_runv+0x86c>)
 8003af0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003af4:	4959      	ldr	r1, [pc, #356]	; (8003c5c <_Z4_runv+0x864>)
 8003af6:	e9c1 2300 	strd	r2, r3, [r1]
 8003afa:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <_Z4_runv+0x860>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	4957      	ldr	r1, [pc, #348]	; (8003c60 <_Z4_runv+0x868>)
 8003b02:	e9c1 2300 	strd	r2, r3, [r1]
	preN2 = N2;
 8003b06:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <_Z4_runv+0x84c>)
 8003b08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b0c:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <_Z4_runv+0x850>)
 8003b0e:	801a      	strh	r2, [r3, #0]
	y21_lin.data = rpm_to_mps(y21.data, R);
 8003b10:	4b54      	ldr	r3, [pc, #336]	; (8003c64 <_Z4_runv+0x86c>)
 8003b12:	ed93 7b02 	vldr	d7, [r3, #8]
 8003b16:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8003bc8 <_Z4_runv+0x7d0>
 8003b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1e:	eef0 0a67 	vmov.f32	s1, s15
 8003b22:	f7ff fbf9 	bl	8003318 <_Z10rpm_to_mpsdd>
 8003b26:	eeb0 7a40 	vmov.f32	s14, s0
 8003b2a:	eef0 7a60 	vmov.f32	s15, s1
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	; (8003c68 <_Z4_runv+0x870>)
 8003b30:	ed83 7b02 	vstr	d7, [r3, #8]
	ec21 = set2_ang.data - y21.data;
 8003b34:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <_Z4_runv+0x874>)
 8003b36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <_Z4_runv+0x86c>)
 8003b3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b40:	f7fc fb4e 	bl	80001e0 <__aeabi_dsub>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4949      	ldr	r1, [pc, #292]	; (8003c70 <_Z4_runv+0x878>)
 8003b4a:	e9c1 2300 	strd	r2, r3, [r1]
	ym21 = 0.00122*set2_ang.data + 0.00078*set2_ang.data + 1.921*ym22 - 0.923*ym23;
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <_Z4_runv+0x874>)
 8003b50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b54:	a31e      	add	r3, pc, #120	; (adr r3, 8003bd0 <_Z4_runv+0x7d8>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fcf9 	bl	8000550 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4690      	mov	r8, r2
 8003b64:	4699      	mov	r9, r3
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <_Z4_runv+0x874>)
 8003b68:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b6c:	a31a      	add	r3, pc, #104	; (adr r3, 8003bd8 <_Z4_runv+0x7e0>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fced 	bl	8000550 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fb31 	bl	80001e4 <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4690      	mov	r8, r2
 8003b88:	4699      	mov	r9, r3
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <_Z4_runv+0x87c>)
 8003b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b90:	a313      	add	r3, pc, #76	; (adr r3, 8003be0 <_Z4_runv+0x7e8>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fcdb 	bl	8000550 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fb1f 	bl	80001e4 <__adddf3>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <_Z4_runv+0x880>)
 8003bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bb4:	e062      	b.n	8003c7c <_Z4_runv+0x884>
 8003bb6:	bf00      	nop
 8003bb8:	58793dd9 	.word	0x58793dd9
 8003bbc:	3fef35a8 	.word	0x3fef35a8
 8003bc0:	da272863 	.word	0xda272863
 8003bc4:	3f994855 	.word	0x3f994855
 8003bc8:	cccccccd 	.word	0xcccccccd
 8003bcc:	3fc4cccc 	.word	0x3fc4cccc
 8003bd0:	0678c005 	.word	0x0678c005
 8003bd4:	3f53fd0d 	.word	0x3f53fd0d
 8003bd8:	3ed527e5 	.word	0x3ed527e5
 8003bdc:	3f498f1d 	.word	0x3f498f1d
 8003be0:	7ef9db23 	.word	0x7ef9db23
 8003be4:	3ffebc6a 	.word	0x3ffebc6a
 8003be8:	20000d98 	.word	0x20000d98
 8003bec:	40568000 	.word	0x40568000
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	200000dc 	.word	0x200000dc
 8003bf8:	20000c60 	.word	0x20000c60
 8003bfc:	20000da0 	.word	0x20000da0
 8003c00:	20000d20 	.word	0x20000d20
 8003c04:	20000d28 	.word	0x20000d28
 8003c08:	20000d18 	.word	0x20000d18
 8003c0c:	20000d38 	.word	0x20000d38
 8003c10:	20000d40 	.word	0x20000d40
 8003c14:	20000d30 	.word	0x20000d30
 8003c18:	20000d08 	.word	0x20000d08
 8003c1c:	20000d10 	.word	0x20000d10
 8003c20:	20000d00 	.word	0x20000d00
 8003c24:	20000d50 	.word	0x20000d50
 8003c28:	20000d58 	.word	0x20000d58
 8003c2c:	20000d48 	.word	0x20000d48
 8003c30:	20000d68 	.word	0x20000d68
 8003c34:	20000d70 	.word	0x20000d70
 8003c38:	20000d60 	.word	0x20000d60
 8003c3c:	20000c80 	.word	0x20000c80
 8003c40:	20000124 	.word	0x20000124
 8003c44:	20000da8 	.word	0x20000da8
 8003c48:	20000daa 	.word	0x20000daa
 8003c4c:	404e0000 	.word	0x404e0000
 8003c50:	40590000 	.word	0x40590000
 8003c54:	40af4000 	.word	0x40af4000
 8003c58:	20000db8 	.word	0x20000db8
 8003c5c:	20000db0 	.word	0x20000db0
 8003c60:	20000dc0 	.word	0x20000dc0
 8003c64:	20000cb0 	.word	0x20000cb0
 8003c68:	20000cd0 	.word	0x20000cd0
 8003c6c:	20000c70 	.word	0x20000c70
 8003c70:	20000de0 	.word	0x20000de0
 8003c74:	20000dd0 	.word	0x20000dd0
 8003c78:	20000dd8 	.word	0x20000dd8
 8003c7c:	a3b4      	add	r3, pc, #720	; (adr r3, 8003f50 <_Z4_runv+0xb58>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fc65 	bl	8000550 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	f7fc faa7 	bl	80001e0 <__aeabi_dsub>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	49ba      	ldr	r1, [pc, #744]	; (8003f80 <_Z4_runv+0xb88>)
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
	em21 = y21.data - ym21;
 8003c9c:	4bb9      	ldr	r3, [pc, #740]	; (8003f84 <_Z4_runv+0xb8c>)
 8003c9e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ca2:	4bb7      	ldr	r3, [pc, #732]	; (8003f80 <_Z4_runv+0xb88>)
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f7fc fa9a 	bl	80001e0 <__aeabi_dsub>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	49b5      	ldr	r1, [pc, #724]	; (8003f88 <_Z4_runv+0xb90>)
 8003cb2:	e9c1 2300 	strd	r2, r3, [r1]
	delkp21 = 1.921*delkp22 - 0.923*delkp23 + 0.07685*ec22 - 0.07685*ec23;
 8003cb6:	4bb5      	ldr	r3, [pc, #724]	; (8003f8c <_Z4_runv+0xb94>)
 8003cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cbc:	a3a2      	add	r3, pc, #648	; (adr r3, 8003f48 <_Z4_runv+0xb50>)
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f7fc fc45 	bl	8000550 <__aeabi_dmul>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4690      	mov	r8, r2
 8003ccc:	4699      	mov	r9, r3
 8003cce:	4bb0      	ldr	r3, [pc, #704]	; (8003f90 <_Z4_runv+0xb98>)
 8003cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd4:	a39e      	add	r3, pc, #632	; (adr r3, 8003f50 <_Z4_runv+0xb58>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc fc39 	bl	8000550 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fa7b 	bl	80001e0 <__aeabi_dsub>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4690      	mov	r8, r2
 8003cf0:	4699      	mov	r9, r3
 8003cf2:	4ba8      	ldr	r3, [pc, #672]	; (8003f94 <_Z4_runv+0xb9c>)
 8003cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf8:	a397      	add	r3, pc, #604	; (adr r3, 8003f58 <_Z4_runv+0xb60>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc27 	bl	8000550 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f7fc fa6b 	bl	80001e4 <__adddf3>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4690      	mov	r8, r2
 8003d14:	4699      	mov	r9, r3
 8003d16:	4ba0      	ldr	r3, [pc, #640]	; (8003f98 <_Z4_runv+0xba0>)
 8003d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1c:	a38e      	add	r3, pc, #568	; (adr r3, 8003f58 <_Z4_runv+0xb60>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fc15 	bl	8000550 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	f7fc fa57 	bl	80001e0 <__aeabi_dsub>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4999      	ldr	r1, [pc, #612]	; (8003f9c <_Z4_runv+0xba4>)
 8003d38:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 += -gammap2*em21*delkp21;
 8003d3c:	4b92      	ldr	r3, [pc, #584]	; (8003f88 <_Z4_runv+0xb90>)
 8003d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d42:	a387      	add	r3, pc, #540	; (adr r3, 8003f60 <_Z4_runv+0xb68>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fc02 	bl	8000550 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <_Z4_runv+0xba4>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc fbf9 	bl	8000550 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	4b8e      	ldr	r3, [pc, #568]	; (8003fa0 <_Z4_runv+0xba8>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f7fc fa3a 	bl	80001e4 <__adddf3>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	498a      	ldr	r1, [pc, #552]	; (8003fa0 <_Z4_runv+0xba8>)
 8003d76:	e9c1 2300 	strd	r2, r3, [r1]
	delki21 = 1.921*delki22 - 0.923*delki23 + 0.00039*ec22 + 0.00025*ec23;
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <_Z4_runv+0xbac>)
 8003d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d80:	a371      	add	r3, pc, #452	; (adr r3, 8003f48 <_Z4_runv+0xb50>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fbe3 	bl	8000550 <__aeabi_dmul>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4690      	mov	r8, r2
 8003d90:	4699      	mov	r9, r3
 8003d92:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <_Z4_runv+0xbb0>)
 8003d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d98:	a36d      	add	r3, pc, #436	; (adr r3, 8003f50 <_Z4_runv+0xb58>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fbd7 	bl	8000550 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4640      	mov	r0, r8
 8003da8:	4649      	mov	r1, r9
 8003daa:	f7fc fa19 	bl	80001e0 <__aeabi_dsub>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4690      	mov	r8, r2
 8003db4:	4699      	mov	r9, r3
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <_Z4_runv+0xb9c>)
 8003db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dbc:	a36a      	add	r3, pc, #424	; (adr r3, 8003f68 <_Z4_runv+0xb70>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fbc5 	bl	8000550 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fa09 	bl	80001e4 <__adddf3>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	4699      	mov	r9, r3
 8003dda:	4b6f      	ldr	r3, [pc, #444]	; (8003f98 <_Z4_runv+0xba0>)
 8003ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003de0:	a363      	add	r3, pc, #396	; (adr r3, 8003f70 <_Z4_runv+0xb78>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc fbb3 	bl	8000550 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4640      	mov	r0, r8
 8003df0:	4649      	mov	r1, r9
 8003df2:	f7fc f9f7 	bl	80001e4 <__adddf3>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	496c      	ldr	r1, [pc, #432]	; (8003fac <_Z4_runv+0xbb4>)
 8003dfc:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 += -gammai2*em21*delki21;
 8003e00:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <_Z4_runv+0xb90>)
 8003e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e06:	a356      	add	r3, pc, #344	; (adr r3, 8003f60 <_Z4_runv+0xb68>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fba0 	bl	8000550 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <_Z4_runv+0xbb4>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fb97 	bl	8000550 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <_Z4_runv+0xbb8>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc f9d8 	bl	80001e4 <__adddf3>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	495d      	ldr	r1, [pc, #372]	; (8003fb0 <_Z4_runv+0xbb8>)
 8003e3a:	e9c1 2300 	strd	r2, r3, [r1]

	alpha2 = Kp2*(ec21 - ec22);
 8003e3e:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <_Z4_runv+0xbbc>)
 8003e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <_Z4_runv+0xb9c>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f7fc f9c9 	bl	80001e0 <__aeabi_dsub>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	4b52      	ldr	r3, [pc, #328]	; (8003fa0 <_Z4_runv+0xba8>)
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f7fc fb78 	bl	8000550 <__aeabi_dmul>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4954      	ldr	r1, [pc, #336]	; (8003fb8 <_Z4_runv+0xbc0>)
 8003e66:	e9c1 2300 	strd	r2, r3, [r1]
	beta2 = T/2*Ki2*(ec21 + ec22);
 8003e6a:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <_Z4_runv+0xbb8>)
 8003e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e70:	a341      	add	r3, pc, #260	; (adr r3, 8003f78 <_Z4_runv+0xb80>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fb6b 	bl	8000550 <__aeabi_dmul>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <_Z4_runv+0xbbc>)
 8003e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <_Z4_runv+0xb9c>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc f9a9 	bl	80001e4 <__adddf3>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4640      	mov	r0, r8
 8003e98:	4649      	mov	r1, r9
 8003e9a:	f7fc fb59 	bl	8000550 <__aeabi_dmul>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4946      	ldr	r1, [pc, #280]	; (8003fbc <_Z4_runv+0xbc4>)
 8003ea4:	e9c1 2300 	strd	r2, r3, [r1]
	u21 = u22 + alpha2 + beta2;
 8003ea8:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <_Z4_runv+0xbc8>)
 8003eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eae:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <_Z4_runv+0xbc0>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc f996 	bl	80001e4 <__adddf3>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <_Z4_runv+0xbc4>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc f98d 	bl	80001e4 <__adddf3>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	493d      	ldr	r1, [pc, #244]	; (8003fc4 <_Z4_runv+0xbcc>)
 8003ed0:	e9c1 2300 	strd	r2, r3, [r1]

	if(u21 < 0)
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <_Z4_runv+0xbcc>)
 8003ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	f7fc fda7 	bl	8000a34 <__aeabi_dcmplt>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d074      	beq.n	8003fd6 <_Z4_runv+0xbde>
	{
		if (u21<-90) u21 = -90;
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <_Z4_runv+0xbcc>)
 8003eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <_Z4_runv+0xbd0>)
 8003ef8:	f7fc fd9c 	bl	8000a34 <__aeabi_dcmplt>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <_Z4_runv+0xb16>
 8003f02:	4930      	ldr	r1, [pc, #192]	; (8003fc4 <_Z4_runv+0xbcc>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <_Z4_runv+0xbd0>)
 8003f0a:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,GPIO_PIN_SET);
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f14:	482d      	ldr	r0, [pc, #180]	; (8003fcc <_Z4_runv+0xbd4>)
 8003f16:	f002 fa1f 	bl	8006358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_SET);
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f20:	482a      	ldr	r0, [pc, #168]	; (8003fcc <_Z4_runv+0xbd4>)
 8003f22:	f002 fa19 	bl	8006358 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, -u21);
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <_Z4_runv+0xbcc>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f32:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <_Z4_runv+0xbd8>)
 8003f34:	681e      	ldr	r6, [r3, #0]
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc fda3 	bl	8000a84 <__aeabi_d2uiz>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6433      	str	r3, [r6, #64]	; 0x40
 8003f42:	e047      	b.n	8003fd4 <_Z4_runv+0xbdc>
 8003f44:	f3af 8000 	nop.w
 8003f48:	7ef9db23 	.word	0x7ef9db23
 8003f4c:	3ffebc6a 	.word	0x3ffebc6a
 8003f50:	4bc6a7f0 	.word	0x4bc6a7f0
 8003f54:	3fed8937 	.word	0x3fed8937
 8003f58:	0cb295ea 	.word	0x0cb295ea
 8003f5c:	3fb3ac71 	.word	0x3fb3ac71
 8003f60:	eb1c432d 	.word	0xeb1c432d
 8003f64:	bf0a36e2 	.word	0xbf0a36e2
 8003f68:	3ed527e5 	.word	0x3ed527e5
 8003f6c:	3f398f1d 	.word	0x3f398f1d
 8003f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f74:	3f30624d 	.word	0x3f30624d
 8003f78:	47ae147b 	.word	0x47ae147b
 8003f7c:	3f747ae1 	.word	0x3f747ae1
 8003f80:	20000dc8 	.word	0x20000dc8
 8003f84:	20000cb0 	.word	0x20000cb0
 8003f88:	20000df8 	.word	0x20000df8
 8003f8c:	20000e18 	.word	0x20000e18
 8003f90:	20000e20 	.word	0x20000e20
 8003f94:	20000de8 	.word	0x20000de8
 8003f98:	20000df0 	.word	0x20000df0
 8003f9c:	20000e10 	.word	0x20000e10
 8003fa0:	20000e40 	.word	0x20000e40
 8003fa4:	20000e30 	.word	0x20000e30
 8003fa8:	20000e38 	.word	0x20000e38
 8003fac:	20000e28 	.word	0x20000e28
 8003fb0:	20000e48 	.word	0x20000e48
 8003fb4:	20000de0 	.word	0x20000de0
 8003fb8:	20000e50 	.word	0x20000e50
 8003fbc:	20000e58 	.word	0x20000e58
 8003fc0:	20000e68 	.word	0x20000e68
 8003fc4:	20000e60 	.word	0x20000e60
 8003fc8:	c0568000 	.word	0xc0568000
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	200000dc 	.word	0x200000dc
 8003fd4:	e027      	b.n	8004026 <_Z4_runv+0xc2e>

	}
	else
	{
			if (u21>=90) u21 = 90;
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <_Z4_runv+0xcec>)
 8003fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <_Z4_runv+0xcf0>)
 8003fe2:	f7fc fd3b 	bl	8000a5c <__aeabi_dcmpge>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <_Z4_runv+0xc00>
 8003fec:	493d      	ldr	r1, [pc, #244]	; (80040e4 <_Z4_runv+0xcec>)
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <_Z4_runv+0xcf0>)
 8003ff4:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ffe:	483b      	ldr	r0, [pc, #236]	; (80040ec <_Z4_runv+0xcf4>)
 8004000:	f002 f9aa 	bl	8006358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_RESET);
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800400a:	4838      	ldr	r0, [pc, #224]	; (80040ec <_Z4_runv+0xcf4>)
 800400c:	f002 f9a4 	bl	8006358 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, u21);
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <_Z4_runv+0xcec>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	4936      	ldr	r1, [pc, #216]	; (80040f0 <_Z4_runv+0xcf8>)
 8004018:	680c      	ldr	r4, [r1, #0]
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	f7fc fd31 	bl	8000a84 <__aeabi_d2uiz>
 8004022:	4603      	mov	r3, r0
 8004024:	6423      	str	r3, [r4, #64]	; 0x40

	}

	if(set2_ang.data == 0) u21 = 0;
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <_Z4_runv+0xcfc>)
 8004028:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	f7fc fcf4 	bl	8000a20 <__aeabi_dcmpeq>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <_Z4_runv+0xc54>
 800403e:	4929      	ldr	r1, [pc, #164]	; (80040e4 <_Z4_runv+0xcec>)
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9c1 2300 	strd	r2, r3, [r1]
	u22 = u21;
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <_Z4_runv+0xcec>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	4929      	ldr	r1, [pc, #164]	; (80040f8 <_Z4_runv+0xd00>)
 8004054:	e9c1 2300 	strd	r2, r3, [r1]
	ec23 = ec22; ec22 = ec21; em23 = em22; em22 = em21;	ym23 = ym22; ym22 = ym21;
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <_Z4_runv+0xd04>)
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	4928      	ldr	r1, [pc, #160]	; (8004100 <_Z4_runv+0xd08>)
 8004060:	e9c1 2300 	strd	r2, r3, [r1]
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <_Z4_runv+0xd0c>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	4924      	ldr	r1, [pc, #144]	; (80040fc <_Z4_runv+0xd04>)
 800406c:	e9c1 2300 	strd	r2, r3, [r1]
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <_Z4_runv+0xd10>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	4925      	ldr	r1, [pc, #148]	; (800410c <_Z4_runv+0xd14>)
 8004078:	e9c1 2300 	strd	r2, r3, [r1]
 800407c:	4b24      	ldr	r3, [pc, #144]	; (8004110 <_Z4_runv+0xd18>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	4921      	ldr	r1, [pc, #132]	; (8004108 <_Z4_runv+0xd10>)
 8004084:	e9c1 2300 	strd	r2, r3, [r1]
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <_Z4_runv+0xd1c>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <_Z4_runv+0xd20>)
 8004090:	e9c1 2300 	strd	r2, r3, [r1]
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <_Z4_runv+0xd24>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	491e      	ldr	r1, [pc, #120]	; (8004114 <_Z4_runv+0xd1c>)
 800409c:	e9c1 2300 	strd	r2, r3, [r1]
	delkp23 = delkp22; delkp22 = delkp21; delki23 = delki22; delki22 = delki21;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <_Z4_runv+0xd28>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	491f      	ldr	r1, [pc, #124]	; (8004124 <_Z4_runv+0xd2c>)
 80040a8:	e9c1 2300 	strd	r2, r3, [r1]
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <_Z4_runv+0xd30>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	491b      	ldr	r1, [pc, #108]	; (8004120 <_Z4_runv+0xd28>)
 80040b4:	e9c1 2300 	strd	r2, r3, [r1]
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <_Z4_runv+0xd34>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	491c      	ldr	r1, [pc, #112]	; (8004130 <_Z4_runv+0xd38>)
 80040c0:	e9c1 2300 	strd	r2, r3, [r1]
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <_Z4_runv+0xd3c>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	4918      	ldr	r1, [pc, #96]	; (800412c <_Z4_runv+0xd34>)
 80040cc:	e9c1 2300 	strd	r2, r3, [r1]
	u21_s.data = u21;
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <_Z4_runv+0xcec>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	4918      	ldr	r1, [pc, #96]	; (8004138 <_Z4_runv+0xd40>)
 80040d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80040dc:	bf00      	nop
 80040de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	20000e60 	.word	0x20000e60
 80040e8:	40568000 	.word	0x40568000
 80040ec:	40020800 	.word	0x40020800
 80040f0:	200000dc 	.word	0x200000dc
 80040f4:	20000c70 	.word	0x20000c70
 80040f8:	20000e68 	.word	0x20000e68
 80040fc:	20000de8 	.word	0x20000de8
 8004100:	20000df0 	.word	0x20000df0
 8004104:	20000de0 	.word	0x20000de0
 8004108:	20000e00 	.word	0x20000e00
 800410c:	20000e08 	.word	0x20000e08
 8004110:	20000df8 	.word	0x20000df8
 8004114:	20000dd0 	.word	0x20000dd0
 8004118:	20000dd8 	.word	0x20000dd8
 800411c:	20000dc8 	.word	0x20000dc8
 8004120:	20000e18 	.word	0x20000e18
 8004124:	20000e20 	.word	0x20000e20
 8004128:	20000e10 	.word	0x20000e10
 800412c:	20000e30 	.word	0x20000e30
 8004130:	20000e38 	.word	0x20000e38
 8004134:	20000e28 	.word	0x20000e28
 8004138:	20000c90 	.word	0x20000c90
 800413c:	00000000 	.word	0x00000000

08004140 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE>:
/*
*/
void _get_cmd_vel(const geometry_msgs::Twist& msg)
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	set1_lin.data = msg.linear.x - msg.angular.z*L/2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004154:	a330      	add	r3, pc, #192	; (adr r3, 8004218 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xd8>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f9f9 	bl	8000550 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800416e:	f7fc fb19 	bl	80007a4 <__aeabi_ddiv>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc f831 	bl	80001e0 <__aeabi_dsub>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4929      	ldr	r1, [pc, #164]	; (8004228 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe8>)
 8004184:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set2_lin.data = msg.linear.x + msg.angular.z*L/2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004194:	a320      	add	r3, pc, #128	; (adr r3, 8004218 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xd8>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc f9d9 	bl	8000550 <__aeabi_dmul>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ae:	f7fc faf9 	bl	80007a4 <__aeabi_ddiv>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc f813 	bl	80001e4 <__adddf3>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xec>)
 80041c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set1_ang.data = mps_to_rpm(set1_lin.data,R);
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe8>)
 80041ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80041ce:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8004220 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe0>
 80041d2:	eeb0 0a47 	vmov.f32	s0, s14
 80041d6:	eef0 0a67 	vmov.f32	s1, s15
 80041da:	f7ff f8d9 	bl	8003390 <_Z10mps_to_rpmdd>
 80041de:	eeb0 7a40 	vmov.f32	s14, s0
 80041e2:	eef0 7a60 	vmov.f32	s15, s1
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xf0>)
 80041e8:	ed83 7b02 	vstr	d7, [r3, #8]
	set2_ang.data = mps_to_rpm(set2_lin.data,R);
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xec>)
 80041ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80041f2:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8004220 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe0>
 80041f6:	eeb0 0a47 	vmov.f32	s0, s14
 80041fa:	eef0 0a67 	vmov.f32	s1, s15
 80041fe:	f7ff f8c7 	bl	8003390 <_Z10mps_to_rpmdd>
 8004202:	eeb0 7a40 	vmov.f32	s14, s0
 8004206:	eef0 7a60 	vmov.f32	s15, s1
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xf4>)
 800420c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bdb0      	pop	{r4, r5, r7, pc}
 8004218:	3d70a3d7 	.word	0x3d70a3d7
 800421c:	3fe7d70a 	.word	0x3fe7d70a
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	3fc4cccc 	.word	0x3fc4cccc
 8004228:	20000c40 	.word	0x20000c40
 800422c:	20000c50 	.word	0x20000c50
 8004230:	20000c60 	.word	0x20000c60
 8004234:	20000c70 	.word	0x20000c70

08004238 <_Z10ex_cmd_velv>:

void ex_cmd_vel(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
	vel_pub.linear.x = (y21_lin.data + y11_lin.data)/2;
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <_Z10ex_cmd_velv+0x70>)
 800423e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <_Z10ex_cmd_velv+0x74>)
 8004244:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004248:	f7fb ffcc 	bl	80001e4 <__adddf3>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800425c:	f7fc faa2 	bl	80007a4 <__aeabi_ddiv>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4912      	ldr	r1, [pc, #72]	; (80042b0 <_Z10ex_cmd_velv+0x78>)
 8004266:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_pub.angular.z = (y21_lin.data - y11_lin.data)/L;
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <_Z10ex_cmd_velv+0x70>)
 800426c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <_Z10ex_cmd_velv+0x74>)
 8004272:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004276:	f7fb ffb3 	bl	80001e0 <__aeabi_dsub>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	a307      	add	r3, pc, #28	; (adr r3, 80042a0 <_Z10ex_cmd_velv+0x68>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f7fc fa8c 	bl	80007a4 <__aeabi_ddiv>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <_Z10ex_cmd_velv+0x78>)
 8004292:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w
 80042a0:	3d70a3d7 	.word	0x3d70a3d7
 80042a4:	3fe7d70a 	.word	0x3fe7d70a
 80042a8:	20000cd0 	.word	0x20000cd0
 80042ac:	20000cc0 	.word	0x20000cc0
 80042b0:	20000bf8 	.word	0x20000bf8

080042b4 <HAL_UART_TxCpltCallback>:

//std_msgs::String str_msg;
//ros::Publisher chatter("chatter", &str_msg);
//char hello[] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a06      	ldr	r2, [pc, #24]	; (80042dc <HAL_UART_TxCpltCallback+0x28>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d106      	bne.n	80042d4 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 80042c6:	4806      	ldr	r0, [pc, #24]	; (80042e0 <HAL_UART_TxCpltCallback+0x2c>)
 80042c8:	f000 f8e0 	bl	800448c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd ff92 	bl	80021f8 <_ZN13STM32Hardware5flushEv>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40004400 	.word	0x40004400
 80042e0:	200002bc 	.word	0x200002bc

080042e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <HAL_UART_RxCpltCallback+0x28>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d106      	bne.n	8004304 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <HAL_UART_RxCpltCallback+0x2c>)
 80042f8:	f000 f8c8 	bl	800448c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd ff3b 	bl	800217a <_ZN13STM32Hardware10reset_rbufEv>
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40004400 	.word	0x40004400
 8004310:	200002bc 	.word	0x200002bc

08004314 <setup>:

void setup(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  nh.initNode();
 8004318:	480e      	ldr	r0, [pc, #56]	; (8004354 <setup+0x40>)
 800431a:	f000 f8c3 	bl	80044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub_cmd_vel);
 800431e:	490e      	ldr	r1, [pc, #56]	; (8004358 <setup+0x44>)
 8004320:	480c      	ldr	r0, [pc, #48]	; (8004354 <setup+0x40>)
 8004322:	f000 f8dc 	bl	80044de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//  nh.advertise(left_set_pub);
//  nh.advertise(right_set_pub);
//  nh.advertise(left_pub);
//  nh.advertise(right_pub);
    nh.advertise(pub);
 8004326:	490d      	ldr	r1, [pc, #52]	; (800435c <setup+0x48>)
 8004328:	480a      	ldr	r0, [pc, #40]	; (8004354 <setup+0x40>)
 800432a:	f000 f903 	bl	8004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

//  nh.advertise(u11_pub);
//  nh.advertise(u21_pub);
//  nh.advertise(chatter);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800432e:	2108      	movs	r1, #8
 8004330:	480b      	ldr	r0, [pc, #44]	; (8004360 <setup+0x4c>)
 8004332:	f002 fd13 	bl	8006d5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8004336:	210c      	movs	r1, #12
 8004338:	4809      	ldr	r0, [pc, #36]	; (8004360 <setup+0x4c>)
 800433a:	f002 fd0f 	bl	8006d5c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1|TIM_CHANNEL_2);
 800433e:	2104      	movs	r1, #4
 8004340:	4808      	ldr	r0, [pc, #32]	; (8004364 <setup+0x50>)
 8004342:	f002 fe79 	bl	8007038 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1|TIM_CHANNEL_2);
 8004346:	2104      	movs	r1, #4
 8004348:	4807      	ldr	r0, [pc, #28]	; (8004368 <setup+0x54>)
 800434a:	f002 fe75 	bl	8007038 <HAL_TIM_Encoder_Start>

}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200002bc 	.word	0x200002bc
 8004358:	20000e88 	.word	0x20000e88
 800435c:	20000e70 	.word	0x20000e70
 8004360:	200000dc 	.word	0x200000dc
 8004364:	20000094 	.word	0x20000094
 8004368:	20000124 	.word	0x20000124

0800436c <loop>:

void loop(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
//
//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
//  str_msg.data = hello;
//  chatter.publish(&str_msg);

  _run();
 8004370:	f7ff f842 	bl	80033f8 <_Z4_runv>
  ex_cmd_vel();
 8004374:	f7ff ff60 	bl	8004238 <_Z10ex_cmd_velv>
//  right_set_pub.publish(&set2_lin);
//  left_pub.publish(&y11_lin);
//  right_pub.publish(&y21_lin);
//  left_pub.publish(&y11);
//  right_pub.publish(&y21);
  pub.publish(&vel_pub);
 8004378:	4905      	ldr	r1, [pc, #20]	; (8004390 <loop+0x24>)
 800437a:	4806      	ldr	r0, [pc, #24]	; (8004394 <loop+0x28>)
 800437c:	f7fd fea3 	bl	80020c6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

//  u11_pub.publish(&u11_s);
//  u21_pub.publish(&u21_s);
  nh.spinOnce();
 8004380:	4805      	ldr	r0, [pc, #20]	; (8004398 <loop+0x2c>)
 8004382:	f000 f907 	bl	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>


  HAL_Delay(5);
 8004386:	2005      	movs	r0, #5
 8004388:	f001 f912 	bl	80055b0 <HAL_Delay>
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000bf8 	.word	0x20000bf8
 8004394:	20000e70 	.word	0x20000e70
 8004398:	200002bc 	.word	0x200002bc

0800439c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d80d      	bhi.n	80043cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	fa22 f103 	lsr.w	r1, r2, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	b2ca      	uxtb	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e7ee      	b.n	80043aa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d811      	bhi.n	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	440a      	add	r2, r1
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	4611      	mov	r1, r2
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	00d2      	lsls	r2, r2, #3
 8004404:	fa01 f202 	lsl.w	r2, r1, r2
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e7ea      	b.n	80043ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	080092ac 	.word	0x080092ac

08004444 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ffe5 	bl	8004424 <_ZN3ros11Subscriber_C1Ev>
 800445a:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3310      	adds	r3, #16
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe fe4b 	bl	8003100 <_ZN13geometry_msgs5TwistC1Ev>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]
  };
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	08009238 	.word	0x08009238

0800448c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
  }
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fe57 	bl	8002164 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b18      	cmp	r3, #24
 80044f0:	dc19      	bgt.n	8004526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80044fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f202 2222 	addw	r2, r2, #546	; 0x222
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	605a      	str	r2, [r3, #4]
        return true;
 800451a:	2301      	movs	r3, #1
 800451c:	e004      	b.n	8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e7e2      	b.n	80044ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8004526:	2300      	movs	r3, #0
  }
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b18      	cmp	r3, #24
 8004546:	dc1e      	bgt.n	8004586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d111      	bne.n	800457e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	60da      	str	r2, [r3, #12]
        return true;
 800457a:	2301      	movs	r3, #1
 800457c:	e004      	b.n	8004588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e7dd      	b.n	8004542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004586:	2300      	movs	r3, #0
  }
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fecd 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 80045a6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d903      	bls.n	80045c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d903      	bls.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd fea6 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad2      	subs	r2, r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004600:	429a      	cmp	r2, r3
 8004602:	bf8c      	ite	hi
 8004604:	2301      	movhi	r3, #1
 8004606:	2300      	movls	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800460e:	f06f 0301 	mvn.w	r3, #1
 8004612:	e194      	b.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd fdbf 	bl	800219c <_ZN13STM32Hardware4readEv>
 800461e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f2c0 8174 	blt.w	8004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	441a      	add	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800463e:	2b07      	cmp	r3, #7
 8004640:	d11e      	bne.n	8004680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	b2d1      	uxtb	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	460a      	mov	r2, r1
 800465a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1b4      	bne.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2208      	movs	r2, #8
 800467a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800467e:	e7af      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004686:	2b00      	cmp	r3, #0
 8004688:	d128      	bne.n	80046dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2bff      	cmp	r3, #255	; 0xff
 800468e:	d10d      	bne.n	80046ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f103 0214 	add.w	r2, r3, #20
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80046aa:	e799      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd fe45 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bf8c      	ite	hi
 80046c4:	2301      	movhi	r3, #1
 80046c6:	2300      	movls	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d088      	beq.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80046d6:	f06f 0301 	mvn.w	r3, #1
 80046da:	e130      	b.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d118      	bne.n	8004718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2bfe      	cmp	r3, #254	; 0xfe
 80046ea:	d107      	bne.n	80046fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80046fa:	e771      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800470a:	2b00      	cmp	r3, #0
 800470c:	f47f af68 	bne.w	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f918 	bl	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004716:	e763      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800471e:	2b02      	cmp	r3, #2
 8004720:	d113      	bne.n	800474a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004748:	e74a      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004750:	2b03      	cmp	r3, #3
 8004752:	d110      	bne.n	8004776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004774:	e734      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800477c:	2b04      	cmp	r3, #4
 800477e:	d116      	bne.n	80047ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004786:	425a      	negs	r2, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	bf58      	it	pl
 800478e:	4253      	negpl	r3, r2
 8004790:	2bff      	cmp	r3, #255	; 0xff
 8004792:	d107      	bne.n	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80047a2:	e71d      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80047ac:	e718      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d10f      	bne.n	80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80047d6:	e703      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d117      	bne.n	8004812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2207      	movs	r2, #7
 80047f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f47f aeec 	bne.w	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2208      	movs	r2, #8
 800480c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004810:	e6e6      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004818:	2b08      	cmp	r3, #8
 800481a:	f47f aee1 	bne.w	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800482c:	425a      	negs	r2, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	bf58      	it	pl
 8004834:	4253      	negpl	r3, r2
 8004836:	2bff      	cmp	r3, #255	; 0xff
 8004838:	f47f aed2 	bne.w	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d110      	bne.n	8004868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f87d 	bl	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f898 	bl	8004982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004862:	f04f 33ff 	mov.w	r3, #4294967295
 8004866:	e06a      	b.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800486e:	2b0a      	cmp	r3, #10
 8004870:	d107      	bne.n	8004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f960 	bl	8004b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004880:	e6ae      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004888:	2b06      	cmp	r3, #6
 800488a:	d10e      	bne.n	80048aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f7fd fa6f 	bl	8001d7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80048a8:	e69a      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048b0:	2b0b      	cmp	r3, #11
 80048b2:	d104      	bne.n	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80048bc:	e690      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048c4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f43f ae84 	beq.w	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048de:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800490a:	4611      	mov	r1, r2
 800490c:	4798      	blx	r3
    while (true)
 800490e:	e667      	b.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004910:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00f      	beq.n	800493c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800492a:	4293      	cmp	r3, r2
 800492c:	d906      	bls.n	800493c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f809 	bl	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800493c:	2300      	movs	r3, #0
  }
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fd70 	bl	8001438 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f107 020c 	add.w	r2, r7, #12
 8004962:	210a      	movs	r1, #10
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
    rt_time = hardware_.time();
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd fce7 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004982:	b590      	push	{r4, r7, lr}
 8004984:	b08b      	sub	sp, #44	; 0x2c
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800498a:	f107 030c 	add.w	r3, r7, #12
 800498e:	4618      	mov	r0, r3
 8004990:	f7fc fe42 	bl	8001618 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2b18      	cmp	r3, #24
 800499c:	dc63      	bgt.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d056      	beq.n	8004a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4608      	mov	r0, r1
 80049fe:	4798      	blx	r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4798      	blx	r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a36:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fb4e 	bl	80020ee <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a52:	4601      	mov	r1, r0
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	3301      	adds	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
 8004a64:	e798      	b.n	8004998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b18      	cmp	r3, #24
 8004a6e:	dc5f      	bgt.n	8004b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d053      	beq.n	8004b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4798      	blx	r3
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	4798      	blx	r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681c      	ldr	r4, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4798      	blx	r3
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	f107 030c 	add.w	r3, r7, #12
 8004b22:	461a      	mov	r2, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	e79c      	b.n	8004a6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004b38:	bf00      	nop
 8004b3a:	372c      	adds	r7, #44	; 0x2c
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}

08004b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc fc72 	bl	8001438 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd fbf1 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fc fcd1 	bl	8001518 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4915      	ldr	r1, [pc, #84]	; (8004bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b80:	099b      	lsrs	r3, r3, #6
 8004b82:	4413      	add	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b86:	6939      	ldr	r1, [r7, #16]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b96:	fb00 f303 	mul.w	r3, r0, r3
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8a6 	bl	8004d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd fbc1 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	10624dd3 	.word	0x10624dd3
 8004bd4:	000f4240 	.word	0x000f4240

08004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b63      	cmp	r3, #99	; 0x63
 8004be8:	dd09      	ble.n	8004bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004bf0:	f083 0301 	eor.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e079      	b.n	8004cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004c0a:	3207      	adds	r2, #7
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22fe      	movs	r2, #254	; 0xfe
 8004c20:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004c4a:	4413      	add	r3, r2
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	121b      	asrs	r3, r3, #8
 8004c68:	b21b      	sxth	r3, r3
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c76:	2305      	movs	r3, #5
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3306      	adds	r3, #6
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	dc0d      	bgt.n	8004ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e7ec      	b.n	8004c7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	425a      	negs	r2, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	bf58      	it	pl
 8004cb0:	4253      	negpl	r3, r2
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	6179      	str	r1, [r7, #20]
 8004cba:	43d2      	mvns	r2, r2
 8004cbc:	b2d1      	uxtb	r1, r2
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	dc0a      	bgt.n	8004ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1d18      	adds	r0, r3, #4
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f7fd fae9 	bl	80022b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e005      	b.n	8004cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004ce6:	4905      	ldr	r1, [pc, #20]	; (8004cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f849 	bl	8004d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	080091c8 	.word	0x080091c8

08004d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fb16 	bl	8002340 <_ZN13STM32Hardware4timeEv>
 8004d14:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4915      	ldr	r1, [pc, #84]	; (8004d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	1e5a      	subs	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004d36:	fba3 0302 	umull	r0, r3, r3, r2
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d40:	fb00 f303 	mul.w	r3, r0, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004d48:	fb02 f303 	mul.w	r3, r2, r3
 8004d4c:	1aca      	subs	r2, r1, r3
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fc f82e 	bl	8000dc8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	10624dd3 	.word	0x10624dd3
 8004d78:	000f4240 	.word	0x000f4240
 8004d7c:	3b9aca00 	.word	0x3b9aca00

08004d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f804 	bl	8004d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	460b      	mov	r3, r1
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fdf6 	bl	80019a0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f107 0214 	add.w	r2, r7, #20
 8004dc6:	2107      	movs	r1, #7
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	4798      	blx	r3
  }
 8004dcc:	bf00      	nop
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_Z41__static_initialization_and_destruction_0ii>:
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d134      	bne.n	8004e4e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d12f      	bne.n	8004e4e <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8004dee:	481a      	ldr	r0, [pc, #104]	; (8004e58 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004df0:	f7fe fa1a 	bl	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist vel_pub;
 8004df4:	4819      	ldr	r0, [pc, #100]	; (8004e5c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004df6:	f7fe f983 	bl	8003100 <_ZN13geometry_msgs5TwistC1Ev>
std_msgs::Float64 set1_lin, set2_lin, set1_ang, set2_ang, u11_s, u21_s;
 8004dfa:	4819      	ldr	r0, [pc, #100]	; (8004e60 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004dfc:	f7fd faac 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e00:	4818      	ldr	r0, [pc, #96]	; (8004e64 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004e02:	f7fd faa9 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e06:	4818      	ldr	r0, [pc, #96]	; (8004e68 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004e08:	f7fd faa6 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e0c:	4817      	ldr	r0, [pc, #92]	; (8004e6c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004e0e:	f7fd faa3 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e12:	4817      	ldr	r0, [pc, #92]	; (8004e70 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004e14:	f7fd faa0 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e18:	4816      	ldr	r0, [pc, #88]	; (8004e74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004e1a:	f7fd fa9d 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 y11, y21, y11_lin, y21_lin;
 8004e1e:	4816      	ldr	r0, [pc, #88]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004e20:	f7fd fa9a 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e24:	4815      	ldr	r0, [pc, #84]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004e26:	f7fd fa97 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e2a:	4815      	ldr	r0, [pc, #84]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004e2c:	f7fd fa94 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
 8004e30:	4814      	ldr	r0, [pc, #80]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004e32:	f7fd fa91 	bl	8002358 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub("vel_pub", &vel_pub);
 8004e36:	2300      	movs	r3, #0
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004e3a:	4913      	ldr	r1, [pc, #76]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004e3c:	4813      	ldr	r0, [pc, #76]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004e3e:	f7fd f92b 	bl	8002098 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &_get_cmd_vel);
 8004e42:	2301      	movs	r3, #1
 8004e44:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004e46:	4913      	ldr	r1, [pc, #76]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004e48:	4813      	ldr	r0, [pc, #76]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004e4a:	f7ff fafb 	bl	8004444 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200002bc 	.word	0x200002bc
 8004e5c:	20000bf8 	.word	0x20000bf8
 8004e60:	20000c40 	.word	0x20000c40
 8004e64:	20000c50 	.word	0x20000c50
 8004e68:	20000c60 	.word	0x20000c60
 8004e6c:	20000c70 	.word	0x20000c70
 8004e70:	20000c80 	.word	0x20000c80
 8004e74:	20000c90 	.word	0x20000c90
 8004e78:	20000ca0 	.word	0x20000ca0
 8004e7c:	20000cb0 	.word	0x20000cb0
 8004e80:	20000cc0 	.word	0x20000cc0
 8004e84:	20000cd0 	.word	0x20000cd0
 8004e88:	08009204 	.word	0x08009204
 8004e8c:	20000e70 	.word	0x20000e70
 8004e90:	08004141 	.word	0x08004141
 8004e94:	0800920c 	.word	0x0800920c
 8004e98:	20000e88 	.word	0x20000e88

08004e9c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe f969 	bl	8003184 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	3210      	adds	r2, #16
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4798      	blx	r3
  }
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3310      	adds	r3, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe f970 	bl	80031d0 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004ef0:	4603      	mov	r3, r0
  }
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3310      	adds	r3, #16
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe f970 	bl	80031ec <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004f0c:	4603      	mov	r3, r0
  }
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_GLOBAL__sub_I_nh>:
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7ff ff4b 	bl	8004dd4 <_Z41__static_initialization_and_destruction_0ii>
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f54:	6453      	str	r3, [r2, #68]	; 0x44
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6413      	str	r3, [r2, #64]	; 0x40
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_MspInit+0x4c>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800

08004f90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4c      	ldr	r2, [pc, #304]	; (80050e0 <HAL_TIM_Encoder_MspInit+0x150>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d12d      	bne.n	800500e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	4b4b      	ldr	r3, [pc, #300]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	4a4a      	ldr	r2, [pc, #296]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc2:	4b48      	ldr	r3, [pc, #288]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a43      	ldr	r2, [pc, #268]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fd8:	f043 0310 	orr.w	r3, r3, #16
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004fea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005004:	4619      	mov	r1, r3
 8005006:	4838      	ldr	r0, [pc, #224]	; (80050e8 <HAL_TIM_Encoder_MspInit+0x158>)
 8005008:	f001 f80a 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800500c:	e063      	b.n	80050d6 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM3)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a36      	ldr	r2, [pc, #216]	; (80050ec <HAL_TIM_Encoder_MspInit+0x15c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d12c      	bne.n	8005072 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	4a30      	ldr	r2, [pc, #192]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	6413      	str	r3, [r2, #64]	; 0x40
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6313      	str	r3, [r2, #48]	; 0x30
 8005044:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005050:	23c0      	movs	r3, #192	; 0xc0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005058:	2301      	movs	r3, #1
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800505c:	2302      	movs	r3, #2
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005060:	2302      	movs	r3, #2
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005068:	4619      	mov	r1, r3
 800506a:	4821      	ldr	r0, [pc, #132]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x160>)
 800506c:	f000 ffd8 	bl	8006020 <HAL_GPIO_Init>
}
 8005070:	e031      	b.n	80050d6 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM4)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <HAL_TIM_Encoder_MspInit+0x164>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d12c      	bne.n	80050d6 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	4a17      	ldr	r2, [pc, #92]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6413      	str	r3, [r2, #64]	; 0x40
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 80050a2:	f043 0308 	orr.w	r3, r3, #8
 80050a6:	6313      	str	r3, [r2, #48]	; 0x30
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <HAL_TIM_Encoder_MspInit+0x154>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80050b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ba:	2302      	movs	r3, #2
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050be:	2301      	movs	r3, #1
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050c2:	2302      	movs	r3, #2
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80050c6:	2302      	movs	r3, #2
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ce:	4619      	mov	r1, r3
 80050d0:	4809      	ldr	r0, [pc, #36]	; (80050f8 <HAL_TIM_Encoder_MspInit+0x168>)
 80050d2:	f000 ffa5 	bl	8006020 <HAL_GPIO_Init>
}
 80050d6:	bf00      	nop
 80050d8:	3738      	adds	r7, #56	; 0x38
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40020000 	.word	0x40020000
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40020c00 	.word	0x40020c00

080050fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d10d      	bne.n	800512a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_TIM_PWM_MspInit+0x3c>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_TIM_PWM_MspInit+0x3c>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_TIM_PWM_MspInit+0x3c>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800

0800513c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d11d      	bne.n	800519a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_TIM_MspPostInit+0x68>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <HAL_TIM_MspPostInit+0x68>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_TIM_MspPostInit+0x68>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800517a:	230c      	movs	r3, #12
 800517c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517e:	2302      	movs	r3, #2
 8005180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005182:	2301      	movs	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005186:	2302      	movs	r3, #2
 8005188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800518a:	2301      	movs	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	4619      	mov	r1, r3
 8005194:	4804      	ldr	r0, [pc, #16]	; (80051a8 <HAL_TIM_MspPostInit+0x6c>)
 8005196:	f000 ff43 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800519a:	bf00      	nop
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40020000 	.word	0x40020000

080051ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a4b      	ldr	r2, [pc, #300]	; (80052f8 <HAL_UART_MspInit+0x14c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	f040 8090 	bne.w	80052f0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	4b49      	ldr	r3, [pc, #292]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	4a48      	ldr	r2, [pc, #288]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	6413      	str	r3, [r2, #64]	; 0x40
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	4a41      	ldr	r2, [pc, #260]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051f6:	f043 0308 	orr.w	r3, r3, #8
 80051fa:	6313      	str	r3, [r2, #48]	; 0x30
 80051fc:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <HAL_UART_MspInit+0x150>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005208:	2360      	movs	r3, #96	; 0x60
 800520a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005214:	2303      	movs	r3, #3
 8005216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005218:	2307      	movs	r3, #7
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	4619      	mov	r1, r3
 8005222:	4837      	ldr	r0, [pc, #220]	; (8005300 <HAL_UART_MspInit+0x154>)
 8005224:	f000 fefc 	bl	8006020 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <HAL_UART_MspInit+0x158>)
 800522a:	4a37      	ldr	r2, [pc, #220]	; (8005308 <HAL_UART_MspInit+0x15c>)
 800522c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800522e:	4b35      	ldr	r3, [pc, #212]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005234:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800523c:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_UART_MspInit+0x158>)
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005248:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800524a:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_UART_MspInit+0x158>)
 800524c:	2200      	movs	r2, #0
 800524e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005252:	2200      	movs	r2, #0
 8005254:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005258:	2200      	movs	r2, #0
 800525a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_UART_MspInit+0x158>)
 800525e:	2200      	movs	r2, #0
 8005260:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005262:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005264:	2200      	movs	r2, #0
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005268:	4826      	ldr	r0, [pc, #152]	; (8005304 <HAL_UART_MspInit+0x158>)
 800526a:	f000 fad7 	bl	800581c <HAL_DMA_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005274:	f7fc f8ba 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a22      	ldr	r2, [pc, #136]	; (8005304 <HAL_UART_MspInit+0x158>)
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_UART_MspInit+0x158>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_UART_MspInit+0x160>)
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_UART_MspInit+0x164>)
 8005288:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_UART_MspInit+0x160>)
 800528c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005290:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005292:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_UART_MspInit+0x160>)
 8005294:	2240      	movs	r2, #64	; 0x40
 8005296:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_UART_MspInit+0x160>)
 800529a:	2200      	movs	r2, #0
 800529c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_UART_MspInit+0x160>)
 80052a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <HAL_UART_MspInit+0x160>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <HAL_UART_MspInit+0x160>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_UART_MspInit+0x160>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <HAL_UART_MspInit+0x160>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_UART_MspInit+0x160>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052c4:	4811      	ldr	r0, [pc, #68]	; (800530c <HAL_UART_MspInit+0x160>)
 80052c6:	f000 faa9 	bl	800581c <HAL_DMA_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80052d0:	f7fc f88c 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0d      	ldr	r2, [pc, #52]	; (800530c <HAL_UART_MspInit+0x160>)
 80052d8:	635a      	str	r2, [r3, #52]	; 0x34
 80052da:	4a0c      	ldr	r2, [pc, #48]	; (800530c <HAL_UART_MspInit+0x160>)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052e0:	2200      	movs	r2, #0
 80052e2:	2100      	movs	r1, #0
 80052e4:	2026      	movs	r0, #38	; 0x26
 80052e6:	f000 fa62 	bl	80057ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052ea:	2026      	movs	r0, #38	; 0x26
 80052ec:	f000 fa7b 	bl	80057e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80052f0:	bf00      	nop
 80052f2:	3728      	adds	r7, #40	; 0x28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40004400 	.word	0x40004400
 80052fc:	40023800 	.word	0x40023800
 8005300:	40020c00 	.word	0x40020c00
 8005304:	200001f8 	.word	0x200001f8
 8005308:	40026088 	.word	0x40026088
 800530c:	20000258 	.word	0x20000258
 8005310:	400260a0 	.word	0x400260a0

08005314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005318:	e7fe      	b.n	8005318 <NMI_Handler+0x4>

0800531a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800531e:	e7fe      	b.n	800531e <HardFault_Handler+0x4>

08005320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005324:	e7fe      	b.n	8005324 <MemManage_Handler+0x4>

08005326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532a:	e7fe      	b.n	800532a <BusFault_Handler+0x4>

0800532c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <UsageFault_Handler+0x4>

08005332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005360:	f000 f906 	bl	8005570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005364:	bf00      	nop
 8005366:	bd80      	pop	{r7, pc}

08005368 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <DMA1_Stream5_IRQHandler+0x10>)
 800536e:	f000 fbed 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200001f8 	.word	0x200001f8

0800537c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <DMA1_Stream6_IRQHandler+0x10>)
 8005382:	f000 fbe3 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000258 	.word	0x20000258

08005390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <USART2_IRQHandler+0x10>)
 8005396:	f002 fb8d 	bl	8007ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200001b4 	.word	0x200001b4

080053a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return 1;
 80053a8:	2301      	movs	r3, #1
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <_kill>:

int _kill(int pid, int sig)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053be:	f003 fc75 	bl	8008cac <__errno>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2216      	movs	r2, #22
 80053c6:	601a      	str	r2, [r3, #0]
  return -1;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_exit>:

void _exit (int status)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053dc:	f04f 31ff 	mov.w	r1, #4294967295
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ffe7 	bl	80053b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053e6:	e7fe      	b.n	80053e6 <_exit+0x12>

080053e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <_sbrk+0x5c>)
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <_sbrk+0x60>)
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <_sbrk+0x64>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <_sbrk+0x64>)
 8005406:	4a12      	ldr	r2, [pc, #72]	; (8005450 <_sbrk+0x68>)
 8005408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <_sbrk+0x64>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d207      	bcs.n	8005428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005418:	f003 fc48 	bl	8008cac <__errno>
 800541c:	4603      	mov	r3, r0
 800541e:	220c      	movs	r2, #12
 8005420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	e009      	b.n	800543c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <_sbrk+0x64>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <_sbrk+0x64>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	4a05      	ldr	r2, [pc, #20]	; (800544c <_sbrk+0x64>)
 8005438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800543a:	68fb      	ldr	r3, [r7, #12]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20020000 	.word	0x20020000
 8005448:	00000400 	.word	0x00000400
 800544c:	20000ee8 	.word	0x20000ee8
 8005450:	20000f00 	.word	0x20000f00

08005454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <SystemInit+0x20>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	4a05      	ldr	r2, [pc, #20]	; (8005474 <SystemInit+0x20>)
 8005460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800547c:	480d      	ldr	r0, [pc, #52]	; (80054b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800547e:	490e      	ldr	r1, [pc, #56]	; (80054b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005484:	e002      	b.n	800548c <LoopCopyDataInit>

08005486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800548a:	3304      	adds	r3, #4

0800548c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800548c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800548e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005490:	d3f9      	bcc.n	8005486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005492:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005494:	4c0b      	ldr	r4, [pc, #44]	; (80054c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005498:	e001      	b.n	800549e <LoopFillZerobss>

0800549a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800549a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800549c:	3204      	adds	r2, #4

0800549e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800549e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a0:	d3fb      	bcc.n	800549a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054a2:	f7ff ffd7 	bl	8005454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054a6:	f003 fc07 	bl	8008cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054aa:	f7fb fcb9 	bl	8000e20 <main>
  bx  lr    
 80054ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80054b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80054bc:	0800937c 	.word	0x0800937c
  ldr r2, =_sbss
 80054c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80054c4:	20000f00 	.word	0x20000f00

080054c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054c8:	e7fe      	b.n	80054c8 <ADC_IRQHandler>
	...

080054cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <HAL_Init+0x40>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a0d      	ldr	r2, [pc, #52]	; (800550c <HAL_Init+0x40>)
 80054d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_Init+0x40>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0a      	ldr	r2, [pc, #40]	; (800550c <HAL_Init+0x40>)
 80054e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054e8:	4b08      	ldr	r3, [pc, #32]	; (800550c <HAL_Init+0x40>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a07      	ldr	r2, [pc, #28]	; (800550c <HAL_Init+0x40>)
 80054ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f4:	2003      	movs	r0, #3
 80054f6:	f000 f94f 	bl	8005798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054fa:	200f      	movs	r0, #15
 80054fc:	f000 f808 	bl	8005510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005500:	f7ff fd1e 	bl	8004f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40023c00 	.word	0x40023c00

08005510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_InitTick+0x54>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <HAL_InitTick+0x58>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005526:	fbb3 f3f1 	udiv	r3, r3, r1
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f967 	bl	8005802 <HAL_SYSTICK_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e00e      	b.n	800555c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b0f      	cmp	r3, #15
 8005542:	d80a      	bhi.n	800555a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005544:	2200      	movs	r2, #0
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	f000 f92f 	bl	80057ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <HAL_InitTick+0x5c>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000000 	.word	0x20000000
 8005568:	20000008 	.word	0x20000008
 800556c:	20000004 	.word	0x20000004

08005570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_IncTick+0x20>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_IncTick+0x24>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4413      	add	r3, r2
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <HAL_IncTick+0x24>)
 8005582:	6013      	str	r3, [r2, #0]
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000008 	.word	0x20000008
 8005594:	20000eec 	.word	0x20000eec

08005598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return uwTick;
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <HAL_GetTick+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000eec 	.word	0x20000eec

080055b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055b8:	f7ff ffee 	bl	8005598 <HAL_GetTick>
 80055bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d005      	beq.n	80055d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_Delay+0x44>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055d6:	bf00      	nop
 80055d8:	f7ff ffde 	bl	8005598 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d8f7      	bhi.n	80055d8 <HAL_Delay+0x28>
  {
  }
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000008 	.word	0x20000008

080055f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005614:	4013      	ands	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562a:	4a04      	ldr	r2, [pc, #16]	; (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	60d3      	str	r3, [r2, #12]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <__NVIC_GetPriorityGrouping+0x18>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	f003 0307 	and.w	r3, r3, #7
}
 800564e:	4618      	mov	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	db0b      	blt.n	8005686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f003 021f 	and.w	r2, r3, #31
 8005674:	4907      	ldr	r1, [pc, #28]	; (8005694 <__NVIC_EnableIRQ+0x38>)
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2001      	movs	r0, #1
 800567e:	fa00 f202 	lsl.w	r2, r0, r2
 8005682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	e000e100 	.word	0xe000e100

08005698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db0a      	blt.n	80056c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	490c      	ldr	r1, [pc, #48]	; (80056e4 <__NVIC_SetPriority+0x4c>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	440b      	add	r3, r1
 80056bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056c0:	e00a      	b.n	80056d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4908      	ldr	r1, [pc, #32]	; (80056e8 <__NVIC_SetPriority+0x50>)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3b04      	subs	r3, #4
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	440b      	add	r3, r1
 80056d6:	761a      	strb	r2, [r3, #24]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f1c3 0307 	rsb	r3, r3, #7
 8005706:	2b04      	cmp	r3, #4
 8005708:	bf28      	it	cs
 800570a:	2304      	movcs	r3, #4
 800570c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3304      	adds	r3, #4
 8005712:	2b06      	cmp	r3, #6
 8005714:	d902      	bls.n	800571c <NVIC_EncodePriority+0x30>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3b03      	subs	r3, #3
 800571a:	e000      	b.n	800571e <NVIC_EncodePriority+0x32>
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005720:	f04f 32ff 	mov.w	r2, #4294967295
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	401a      	ands	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005734:	f04f 31ff 	mov.w	r1, #4294967295
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	fa01 f303 	lsl.w	r3, r1, r3
 800573e:	43d9      	mvns	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	4313      	orrs	r3, r2
         );
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005764:	d301      	bcc.n	800576a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005766:	2301      	movs	r3, #1
 8005768:	e00f      	b.n	800578a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <SysTick_Config+0x40>)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005772:	210f      	movs	r1, #15
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	f7ff ff8e 	bl	8005698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <SysTick_Config+0x40>)
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <SysTick_Config+0x40>)
 8005784:	2207      	movs	r2, #7
 8005786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000e010 	.word	0xe000e010

08005798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff29 	bl	80055f8 <__NVIC_SetPriorityGrouping>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	4603      	mov	r3, r0
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057c0:	f7ff ff3e 	bl	8005640 <__NVIC_GetPriorityGrouping>
 80057c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff8e 	bl	80056ec <NVIC_EncodePriority>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff5d 	bl	8005698 <__NVIC_SetPriority>
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	4603      	mov	r3, r0
 80057ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff31 	bl	800565c <__NVIC_EnableIRQ>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff ffa2 	bl	8005754 <SysTick_Config>
 8005810:	4603      	mov	r3, r0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005828:	f7ff feb6 	bl	8005598 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e099      	b.n	800596c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005858:	e00f      	b.n	800587a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800585a:	f7ff fe9d 	bl	8005598 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b05      	cmp	r3, #5
 8005866:	d908      	bls.n	800587a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2203      	movs	r2, #3
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e078      	b.n	800596c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e8      	bne.n	800585a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4b38      	ldr	r3, [pc, #224]	; (8005974 <HAL_DMA_Init+0x158>)
 8005894:	4013      	ands	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d107      	bne.n	80058e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	4313      	orrs	r3, r2
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b04      	cmp	r3, #4
 800590c:	d117      	bne.n	800593e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb01 	bl	8005f28 <DMA_CheckFifoParam>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2240      	movs	r2, #64	; 0x40
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800593a:	2301      	movs	r3, #1
 800593c:	e016      	b.n	800596c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fab8 	bl	8005ebc <DMA_CalcBaseAndBitshift>
 800594c:	4603      	mov	r3, r0
 800594e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	223f      	movs	r2, #63	; 0x3f
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	f010803f 	.word	0xf010803f

08005978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_DMA_Start_IT+0x26>
 800599a:	2302      	movs	r3, #2
 800599c:	e040      	b.n	8005a20 <HAL_DMA_Start_IT+0xa8>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d12f      	bne.n	8005a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa4a 	bl	8005e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d0:	223f      	movs	r2, #63	; 0x3f
 80059d2:	409a      	lsls	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0216 	orr.w	r2, r2, #22
 80059e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0208 	orr.w	r2, r2, #8
 80059fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e005      	b.n	8005a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a36:	f7ff fdaf 	bl	8005598 <HAL_GetTick>
 8005a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d008      	beq.n	8005a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e052      	b.n	8005b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0216 	bic.w	r2, r2, #22
 8005a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <HAL_DMA_Abort+0x62>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0208 	bic.w	r2, r2, #8
 8005a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aaa:	e013      	b.n	8005ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aac:	f7ff fd74 	bl	8005598 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d90c      	bls.n	8005ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e015      	b.n	8005b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e4      	bne.n	8005aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae6:	223f      	movs	r2, #63	; 0x3f
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d004      	beq.n	8005b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e00c      	b.n	8005b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2205      	movs	r2, #5
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b58:	4b8e      	ldr	r3, [pc, #568]	; (8005d94 <HAL_DMA_IRQHandler+0x248>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a8e      	ldr	r2, [pc, #568]	; (8005d98 <HAL_DMA_IRQHandler+0x24c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0a9b      	lsrs	r3, r3, #10
 8005b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	2208      	movs	r2, #8
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01a      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0204 	bic.w	r2, r2, #4
 8005b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	2201      	movs	r2, #1
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f043 0202 	orr.w	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	2204      	movs	r2, #4
 8005c12:	409a      	lsls	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f043 0204 	orr.w	r2, r3, #4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c28:	2210      	movs	r2, #16
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d043      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03c      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	2210      	movs	r2, #16
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d018      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d024      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	e01f      	b.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4798      	blx	r3
 8005c8c:	e016      	b.n	8005cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0208 	bic.w	r2, r2, #8
 8005caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 808f 	beq.w	8005dec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8087 	beq.w	8005dec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d136      	bne.n	8005d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0216 	bic.w	r2, r2, #22
 8005d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_DMA_IRQHandler+0x1da>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0208 	bic.w	r2, r2, #8
 8005d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	223f      	movs	r2, #63	; 0x3f
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d07e      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
        }
        return;
 8005d62:	e079      	b.n	8005e58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01d      	beq.n	8005dae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10d      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d031      	beq.n	8005dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	e02c      	b.n	8005dec <HAL_DMA_IRQHandler+0x2a0>
 8005d92:	bf00      	nop
 8005d94:	20000000 	.word	0x20000000
 8005d98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d023      	beq.n	8005dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
 8005dac:	e01e      	b.n	8005dec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10f      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0210 	bic.w	r2, r2, #16
 8005dca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d032      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d022      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2205      	movs	r2, #5
 8005e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d307      	bcc.n	8005e34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f2      	bne.n	8005e18 <HAL_DMA_IRQHandler+0x2cc>
 8005e32:	e000      	b.n	8005e36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
 8005e56:	e000      	b.n	8005e5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e58:	bf00      	nop
    }
  }
}
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d108      	bne.n	8005ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e9e:	e007      	b.n	8005eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	3b10      	subs	r3, #16
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <DMA_CalcBaseAndBitshift+0x64>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <DMA_CalcBaseAndBitshift+0x68>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d909      	bls.n	8005efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	659a      	str	r2, [r3, #88]	; 0x58
 8005efc:	e007      	b.n	8005f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	aaaaaaab 	.word	0xaaaaaaab
 8005f24:	08009360 	.word	0x08009360

08005f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11f      	bne.n	8005f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d856      	bhi.n	8005ff6 <DMA_CheckFifoParam+0xce>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <DMA_CheckFifoParam+0x28>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08005f73 	.word	0x08005f73
 8005f58:	08005f61 	.word	0x08005f61
 8005f5c:	08005ff7 	.word	0x08005ff7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d046      	beq.n	8005ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f70:	e043      	b.n	8005ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f7a:	d140      	bne.n	8005ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f80:	e03d      	b.n	8005ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	d121      	bne.n	8005fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d837      	bhi.n	8006002 <DMA_CheckFifoParam+0xda>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <DMA_CheckFifoParam+0x70>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005faf 	.word	0x08005faf
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08005fc1 	.word	0x08005fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e030      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d025      	beq.n	8006006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbe:	e022      	b.n	8006006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fc8:	d11f      	bne.n	800600a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fce:	e01c      	b.n	800600a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d903      	bls.n	8005fde <DMA_CheckFifoParam+0xb6>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d003      	beq.n	8005fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fdc:	e018      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e015      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e00b      	b.n	800600e <DMA_CheckFifoParam+0xe6>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e00a      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e008      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffe:	bf00      	nop
 8006000:	e006      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;   
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 800600e:	bf00      	nop
    }
  } 
  
  return status; 
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e16b      	b.n	8006314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800603c:	2201      	movs	r2, #1
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4013      	ands	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	429a      	cmp	r2, r3
 8006056:	f040 815a 	bne.w	800630e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d005      	beq.n	8006072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800606e:	2b02      	cmp	r3, #2
 8006070:	d130      	bne.n	80060d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	2203      	movs	r2, #3
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060a8:	2201      	movs	r2, #1
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 0201 	and.w	r2, r3, #1
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d017      	beq.n	8006110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	2203      	movs	r2, #3
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d123      	bne.n	8006164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	08da      	lsrs	r2, r3, #3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3208      	adds	r2, #8
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	220f      	movs	r2, #15
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	08da      	lsrs	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3208      	adds	r2, #8
 800615e:	69b9      	ldr	r1, [r7, #24]
 8006160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	2203      	movs	r2, #3
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 0203 	and.w	r2, r3, #3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80b4 	beq.w	800630e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	4b60      	ldr	r3, [pc, #384]	; (800632c <HAL_GPIO_Init+0x30c>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	4a5f      	ldr	r2, [pc, #380]	; (800632c <HAL_GPIO_Init+0x30c>)
 80061b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061b4:	6453      	str	r3, [r2, #68]	; 0x44
 80061b6:	4b5d      	ldr	r3, [pc, #372]	; (800632c <HAL_GPIO_Init+0x30c>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061c2:	4a5b      	ldr	r2, [pc, #364]	; (8006330 <HAL_GPIO_Init+0x310>)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	3302      	adds	r3, #2
 80061ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	220f      	movs	r2, #15
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a52      	ldr	r2, [pc, #328]	; (8006334 <HAL_GPIO_Init+0x314>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02b      	beq.n	8006246 <HAL_GPIO_Init+0x226>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a51      	ldr	r2, [pc, #324]	; (8006338 <HAL_GPIO_Init+0x318>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d025      	beq.n	8006242 <HAL_GPIO_Init+0x222>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a50      	ldr	r2, [pc, #320]	; (800633c <HAL_GPIO_Init+0x31c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01f      	beq.n	800623e <HAL_GPIO_Init+0x21e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a4f      	ldr	r2, [pc, #316]	; (8006340 <HAL_GPIO_Init+0x320>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d019      	beq.n	800623a <HAL_GPIO_Init+0x21a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <HAL_GPIO_Init+0x324>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_GPIO_Init+0x216>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a4d      	ldr	r2, [pc, #308]	; (8006348 <HAL_GPIO_Init+0x328>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00d      	beq.n	8006232 <HAL_GPIO_Init+0x212>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a4c      	ldr	r2, [pc, #304]	; (800634c <HAL_GPIO_Init+0x32c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <HAL_GPIO_Init+0x20e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a4b      	ldr	r2, [pc, #300]	; (8006350 <HAL_GPIO_Init+0x330>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_GPIO_Init+0x20a>
 8006226:	2307      	movs	r3, #7
 8006228:	e00e      	b.n	8006248 <HAL_GPIO_Init+0x228>
 800622a:	2308      	movs	r3, #8
 800622c:	e00c      	b.n	8006248 <HAL_GPIO_Init+0x228>
 800622e:	2306      	movs	r3, #6
 8006230:	e00a      	b.n	8006248 <HAL_GPIO_Init+0x228>
 8006232:	2305      	movs	r3, #5
 8006234:	e008      	b.n	8006248 <HAL_GPIO_Init+0x228>
 8006236:	2304      	movs	r3, #4
 8006238:	e006      	b.n	8006248 <HAL_GPIO_Init+0x228>
 800623a:	2303      	movs	r3, #3
 800623c:	e004      	b.n	8006248 <HAL_GPIO_Init+0x228>
 800623e:	2302      	movs	r3, #2
 8006240:	e002      	b.n	8006248 <HAL_GPIO_Init+0x228>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <HAL_GPIO_Init+0x228>
 8006246:	2300      	movs	r3, #0
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	f002 0203 	and.w	r2, r2, #3
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	4093      	lsls	r3, r2
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006258:	4935      	ldr	r1, [pc, #212]	; (8006330 <HAL_GPIO_Init+0x310>)
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	3302      	adds	r3, #2
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006266:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_GPIO_Init+0x334>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	43db      	mvns	r3, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4013      	ands	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800628a:	4a32      	ldr	r2, [pc, #200]	; (8006354 <HAL_GPIO_Init+0x334>)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006290:	4b30      	ldr	r3, [pc, #192]	; (8006354 <HAL_GPIO_Init+0x334>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b4:	4a27      	ldr	r2, [pc, #156]	; (8006354 <HAL_GPIO_Init+0x334>)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <HAL_GPIO_Init+0x334>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062de:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_GPIO_Init+0x334>)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_GPIO_Init+0x334>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006308:	4a12      	ldr	r2, [pc, #72]	; (8006354 <HAL_GPIO_Init+0x334>)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	f67f ae90 	bls.w	800603c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	40013800 	.word	0x40013800
 8006334:	40020000 	.word	0x40020000
 8006338:	40020400 	.word	0x40020400
 800633c:	40020800 	.word	0x40020800
 8006340:	40020c00 	.word	0x40020c00
 8006344:	40021000 	.word	0x40021000
 8006348:	40021400 	.word	0x40021400
 800634c:	40021800 	.word	0x40021800
 8006350:	40021c00 	.word	0x40021c00
 8006354:	40013c00 	.word	0x40013c00

08006358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
 8006364:	4613      	mov	r3, r2
 8006366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006368:	787b      	ldrb	r3, [r7, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006374:	e003      	b.n	800637e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	041a      	lsls	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	619a      	str	r2, [r3, #24]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e267      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d075      	beq.n	8006496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063aa:	4b88      	ldr	r3, [pc, #544]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d00c      	beq.n	80063d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063b6:	4b85      	ldr	r3, [pc, #532]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d112      	bne.n	80063e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063c2:	4b82      	ldr	r3, [pc, #520]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d10b      	bne.n	80063e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d0:	4b7e      	ldr	r3, [pc, #504]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d05b      	beq.n	8006494 <HAL_RCC_OscConfig+0x108>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d157      	bne.n	8006494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e242      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d106      	bne.n	8006400 <HAL_RCC_OscConfig+0x74>
 80063f2:	4b76      	ldr	r3, [pc, #472]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a75      	ldr	r2, [pc, #468]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e01d      	b.n	800643c <HAL_RCC_OscConfig+0xb0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x98>
 800640a:	4b70      	ldr	r3, [pc, #448]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6f      	ldr	r2, [pc, #444]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b6d      	ldr	r3, [pc, #436]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a6c      	ldr	r2, [pc, #432]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e00b      	b.n	800643c <HAL_RCC_OscConfig+0xb0>
 8006424:	4b69      	ldr	r3, [pc, #420]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a68      	ldr	r2, [pc, #416]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b66      	ldr	r3, [pc, #408]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a65      	ldr	r2, [pc, #404]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006444:	f7ff f8a8 	bl	8005598 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800644c:	f7ff f8a4 	bl	8005598 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b64      	cmp	r3, #100	; 0x64
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e207      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0xc0>
 800646a:	e014      	b.n	8006496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646c:	f7ff f894 	bl	8005598 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006474:	f7ff f890 	bl	8005598 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1f3      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	4b51      	ldr	r3, [pc, #324]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0xe8>
 8006492:	e000      	b.n	8006496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d063      	beq.n	800656a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a2:	4b4a      	ldr	r3, [pc, #296]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ae:	4b47      	ldr	r3, [pc, #284]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d11c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ba:	4b44      	ldr	r3, [pc, #272]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d116      	bne.n	80064f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c6:	4b41      	ldr	r3, [pc, #260]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_RCC_OscConfig+0x152>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d001      	beq.n	80064de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e1c7      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	4b3b      	ldr	r3, [pc, #236]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4937      	ldr	r1, [pc, #220]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f2:	e03a      	b.n	800656a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d020      	beq.n	800653e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064fc:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <HAL_RCC_OscConfig+0x244>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006502:	f7ff f849 	bl	8005598 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800650a:	f7ff f845 	bl	8005598 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e1a8      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006528:	4b28      	ldr	r3, [pc, #160]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4925      	ldr	r1, [pc, #148]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006538:	4313      	orrs	r3, r2
 800653a:	600b      	str	r3, [r1, #0]
 800653c:	e015      	b.n	800656a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800653e:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_RCC_OscConfig+0x244>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7ff f828 	bl	8005598 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800654c:	f7ff f824 	bl	8005598 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e187      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f0      	bne.n	800654c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d036      	beq.n	80065e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <HAL_RCC_OscConfig+0x248>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7ff f808 	bl	8005598 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800658c:	f7ff f804 	bl	8005598 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e167      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_RCC_OscConfig+0x240>)
 80065a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x200>
 80065aa:	e01b      	b.n	80065e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <HAL_RCC_OscConfig+0x248>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b2:	f7fe fff1 	bl	8005598 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b8:	e00e      	b.n	80065d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ba:	f7fe ffed 	bl	8005598 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d907      	bls.n	80065d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e150      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
 80065cc:	40023800 	.word	0x40023800
 80065d0:	42470000 	.word	0x42470000
 80065d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d8:	4b88      	ldr	r3, [pc, #544]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80065da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ea      	bne.n	80065ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8097 	beq.w	8006720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f6:	4b81      	ldr	r3, [pc, #516]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10f      	bne.n	8006622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	4b7d      	ldr	r3, [pc, #500]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	4a7c      	ldr	r2, [pc, #496]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800660c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006610:	6413      	str	r3, [r2, #64]	; 0x40
 8006612:	4b7a      	ldr	r3, [pc, #488]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006622:	4b77      	ldr	r3, [pc, #476]	; (8006800 <HAL_RCC_OscConfig+0x474>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d118      	bne.n	8006660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662e:	4b74      	ldr	r3, [pc, #464]	; (8006800 <HAL_RCC_OscConfig+0x474>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a73      	ldr	r2, [pc, #460]	; (8006800 <HAL_RCC_OscConfig+0x474>)
 8006634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800663a:	f7fe ffad 	bl	8005598 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006642:	f7fe ffa9 	bl	8005598 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e10c      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006654:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <HAL_RCC_OscConfig+0x474>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <HAL_RCC_OscConfig+0x2ea>
 8006668:	4b64      	ldr	r3, [pc, #400]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a63      	ldr	r2, [pc, #396]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
 8006674:	e01c      	b.n	80066b0 <HAL_RCC_OscConfig+0x324>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b05      	cmp	r3, #5
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0x30c>
 800667e:	4b5f      	ldr	r3, [pc, #380]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	4a5e      	ldr	r2, [pc, #376]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006684:	f043 0304 	orr.w	r3, r3, #4
 8006688:	6713      	str	r3, [r2, #112]	; 0x70
 800668a:	4b5c      	ldr	r3, [pc, #368]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	4a5b      	ldr	r2, [pc, #364]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6713      	str	r3, [r2, #112]	; 0x70
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0x324>
 8006698:	4b58      	ldr	r3, [pc, #352]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a57      	ldr	r2, [pc, #348]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	4b55      	ldr	r3, [pc, #340]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	4a54      	ldr	r2, [pc, #336]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80066aa:	f023 0304 	bic.w	r3, r3, #4
 80066ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b8:	f7fe ff6e 	bl	8005598 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fe ff6a 	bl	8005598 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e0cb      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d6:	4b49      	ldr	r3, [pc, #292]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ee      	beq.n	80066c0 <HAL_RCC_OscConfig+0x334>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e4:	f7fe ff58 	bl	8005598 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fe ff54 	bl	8005598 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e0b5      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006702:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1ee      	bne.n	80066ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d105      	bne.n	8006720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006714:	4b39      	ldr	r3, [pc, #228]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	4a38      	ldr	r2, [pc, #224]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800671a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80a1 	beq.w	800686c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800672a:	4b34      	ldr	r3, [pc, #208]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b08      	cmp	r3, #8
 8006734:	d05c      	beq.n	80067f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d141      	bne.n	80067c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <HAL_RCC_OscConfig+0x478>)
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fe ff28 	bl	8005598 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fe ff24 	bl	8005598 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e087      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	4b27      	ldr	r3, [pc, #156]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69da      	ldr	r2, [r3, #28]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	3b01      	subs	r3, #1
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	491b      	ldr	r1, [pc, #108]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <HAL_RCC_OscConfig+0x478>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679a:	f7fe fefd 	bl	8005598 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a2:	f7fe fef9 	bl	8005598 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e05c      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b4:	4b11      	ldr	r3, [pc, #68]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x416>
 80067c0:	e054      	b.n	800686c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c2:	4b10      	ldr	r3, [pc, #64]	; (8006804 <HAL_RCC_OscConfig+0x478>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fe fee6 	bl	8005598 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067d0:	f7fe fee2 	bl	8005598 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e045      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <HAL_RCC_OscConfig+0x470>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x444>
 80067ee:	e03d      	b.n	800686c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d107      	bne.n	8006808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e038      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
 80067fc:	40023800 	.word	0x40023800
 8006800:	40007000 	.word	0x40007000
 8006804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <HAL_RCC_OscConfig+0x4ec>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d028      	beq.n	8006868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006820:	429a      	cmp	r2, r3
 8006822:	d121      	bne.n	8006868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682e:	429a      	cmp	r2, r3
 8006830:	d11a      	bne.n	8006868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006838:	4013      	ands	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800683e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006840:	4293      	cmp	r3, r2
 8006842:	d111      	bne.n	8006868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	3b01      	subs	r3, #1
 8006852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006854:	429a      	cmp	r2, r3
 8006856:	d107      	bne.n	8006868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006864:	429a      	cmp	r2, r3
 8006866:	d001      	beq.n	800686c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023800 	.word	0x40023800

0800687c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0cc      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006890:	4b68      	ldr	r3, [pc, #416]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d90c      	bls.n	80068b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b65      	ldr	r3, [pc, #404]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a6:	4b63      	ldr	r3, [pc, #396]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0b8      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d020      	beq.n	8006906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d0:	4b59      	ldr	r3, [pc, #356]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4a58      	ldr	r2, [pc, #352]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e8:	4b53      	ldr	r3, [pc, #332]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4a52      	ldr	r2, [pc, #328]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f4:	4b50      	ldr	r3, [pc, #320]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	494d      	ldr	r1, [pc, #308]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	4313      	orrs	r3, r2
 8006904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d044      	beq.n	800699c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d107      	bne.n	800692a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691a:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d119      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e07f      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d003      	beq.n	800693a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006936:	2b03      	cmp	r3, #3
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693a:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e06f      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694a:	4b3b      	ldr	r3, [pc, #236]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e067      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695a:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f023 0203 	bic.w	r2, r3, #3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4934      	ldr	r1, [pc, #208]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	4313      	orrs	r3, r2
 800696a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800696c:	f7fe fe14 	bl	8005598 <HAL_GetTick>
 8006970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006972:	e00a      	b.n	800698a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006974:	f7fe fe10 	bl	8005598 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e04f      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 020c 	and.w	r2, r3, #12
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	429a      	cmp	r2, r3
 800699a:	d1eb      	bne.n	8006974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d20c      	bcs.n	80069c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069aa:	4b22      	ldr	r3, [pc, #136]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <HAL_RCC_ClockConfig+0x1b8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d001      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e032      	b.n	8006a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d0:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4916      	ldr	r1, [pc, #88]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	490e      	ldr	r1, [pc, #56]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a02:	f000 f821 	bl	8006a48 <HAL_RCC_GetSysClockFreq>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	490a      	ldr	r1, [pc, #40]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 8006a14:	5ccb      	ldrb	r3, [r1, r3]
 8006a16:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1a:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fd74 	bl	8005510 <HAL_InitTick>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40023c00 	.word	0x40023c00
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	08009348 	.word	0x08009348
 8006a40:	20000000 	.word	0x20000000
 8006a44:	20000004 	.word	0x20000004

08006a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a4c:	b094      	sub	sp, #80	; 0x50
 8006a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	647b      	str	r3, [r7, #68]	; 0x44
 8006a54:	2300      	movs	r3, #0
 8006a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a58:	2300      	movs	r3, #0
 8006a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a60:	4b79      	ldr	r3, [pc, #484]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 030c 	and.w	r3, r3, #12
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d00d      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0x40>
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	f200 80e1 	bhi.w	8006c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0x34>
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d003      	beq.n	8006a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a7a:	e0db      	b.n	8006c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a7c:	4b73      	ldr	r3, [pc, #460]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a80:	e0db      	b.n	8006c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a82:	4b73      	ldr	r3, [pc, #460]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a86:	e0d8      	b.n	8006c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a88:	4b6f      	ldr	r3, [pc, #444]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a92:	4b6d      	ldr	r3, [pc, #436]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d063      	beq.n	8006b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9e:	4b6a      	ldr	r3, [pc, #424]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	099b      	lsrs	r3, r3, #6
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006aba:	4622      	mov	r2, r4
 8006abc:	462b      	mov	r3, r5
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	0159      	lsls	r1, r3, #5
 8006ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006acc:	0150      	lsls	r0, r2, #5
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	1a51      	subs	r1, r2, r1
 8006ad6:	6139      	str	r1, [r7, #16]
 8006ad8:	4629      	mov	r1, r5
 8006ada:	eb63 0301 	sbc.w	r3, r3, r1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aec:	4659      	mov	r1, fp
 8006aee:	018b      	lsls	r3, r1, #6
 8006af0:	4651      	mov	r1, sl
 8006af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006af6:	4651      	mov	r1, sl
 8006af8:	018a      	lsls	r2, r1, #6
 8006afa:	4651      	mov	r1, sl
 8006afc:	ebb2 0801 	subs.w	r8, r2, r1
 8006b00:	4659      	mov	r1, fp
 8006b02:	eb63 0901 	sbc.w	r9, r3, r1
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b1a:	4690      	mov	r8, r2
 8006b1c:	4699      	mov	r9, r3
 8006b1e:	4623      	mov	r3, r4
 8006b20:	eb18 0303 	adds.w	r3, r8, r3
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	462b      	mov	r3, r5
 8006b28:	eb49 0303 	adc.w	r3, r9, r3
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	024b      	lsls	r3, r1, #9
 8006b3e:	4621      	mov	r1, r4
 8006b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b44:	4621      	mov	r1, r4
 8006b46:	024a      	lsls	r2, r1, #9
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4e:	2200      	movs	r2, #0
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b58:	f7f9 ffb4 	bl	8000ac4 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4613      	mov	r3, r2
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b64:	e058      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b66:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	099b      	lsrs	r3, r3, #6
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	4611      	mov	r1, r2
 8006b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	f04f 0000 	mov.w	r0, #0
 8006b88:	f04f 0100 	mov.w	r1, #0
 8006b8c:	0159      	lsls	r1, r3, #5
 8006b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b92:	0150      	lsls	r0, r2, #5
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4641      	mov	r1, r8
 8006b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8006bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	00eb      	lsls	r3, r5, #3
 8006bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bce:	00e2      	lsls	r2, r4, #3
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	4643      	mov	r3, r8
 8006bd6:	18e3      	adds	r3, r4, r3
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	464b      	mov	r3, r9
 8006bdc:	eb45 0303 	adc.w	r3, r5, r3
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bee:	4629      	mov	r1, r5
 8006bf0:	028b      	lsls	r3, r1, #10
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	028a      	lsls	r2, r1, #10
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c02:	2200      	movs	r2, #0
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	61fa      	str	r2, [r7, #28]
 8006c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c0c:	f7f9 ff5a 	bl	8000ac4 <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4613      	mov	r3, r2
 8006c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	3301      	adds	r3, #1
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c32:	e002      	b.n	8006c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3750      	adds	r7, #80	; 0x50
 8006c40:	46bd      	mov	sp, r7
 8006c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c46:	bf00      	nop
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	00f42400 	.word	0x00f42400
 8006c50:	007a1200 	.word	0x007a1200

08006c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c58:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000000 	.word	0x20000000

08006c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c70:	f7ff fff0 	bl	8006c54 <HAL_RCC_GetHCLKFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	0a9b      	lsrs	r3, r3, #10
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4903      	ldr	r1, [pc, #12]	; (8006c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	08009358 	.word	0x08009358

08006c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c98:	f7ff ffdc 	bl	8006c54 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	0b5b      	lsrs	r3, r3, #13
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	08009358 	.word	0x08009358

08006cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e041      	b.n	8006d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fe fa0a 	bl	80050fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f000 faec 	bl	80072d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <HAL_TIM_PWM_Start+0x24>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	bf14      	ite	ne
 8006d78:	2301      	movne	r3, #1
 8006d7a:	2300      	moveq	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	e022      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x6a>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d109      	bne.n	8006d9a <HAL_TIM_PWM_Start+0x3e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	bf14      	ite	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	2300      	moveq	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e015      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x6a>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d109      	bne.n	8006db4 <HAL_TIM_PWM_Start+0x58>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e008      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x6a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e07c      	b.n	8006ec8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_PWM_Start+0x82>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	e013      	b.n	8006e06 <HAL_TIM_PWM_Start+0xaa>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_PWM_Start+0x92>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dec:	e00b      	b.n	8006e06 <HAL_TIM_PWM_Start+0xaa>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d104      	bne.n	8006dfe <HAL_TIM_PWM_Start+0xa2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dfc:	e003      	b.n	8006e06 <HAL_TIM_PWM_Start+0xaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fcb2 	bl	8007778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <HAL_TIM_PWM_Start+0x174>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_TIM_PWM_Start+0xcc>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_TIM_PWM_Start+0x178>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d101      	bne.n	8006e2c <HAL_TIM_PWM_Start+0xd0>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <HAL_TIM_PWM_Start+0xd2>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_TIM_PWM_Start+0x174>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d01d      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <HAL_TIM_PWM_Start+0x17c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <HAL_TIM_PWM_Start+0x180>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_TIM_PWM_Start+0x184>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a16      	ldr	r2, [pc, #88]	; (8006ed4 <HAL_TIM_PWM_Start+0x178>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <HAL_TIM_PWM_Start+0x188>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x136>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <HAL_TIM_PWM_Start+0x18c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d111      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	d010      	beq.n	8006ec6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb4:	e007      	b.n	8006ec6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40001800 	.word	0x40001800

08006eec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e097      	b.n	8007030 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fe f83b 	bl	8004f90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f30:	f023 0307 	bic.w	r3, r3, #7
 8006f34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4610      	mov	r0, r2
 8006f42:	f000 f9c9 	bl	80072d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f8c:	f023 030c 	bic.w	r3, r3, #12
 8006f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	011a      	lsls	r2, r3, #4
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	031b      	lsls	r3, r3, #12
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007048:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007050:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007058:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007060:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d110      	bne.n	800708a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d102      	bne.n	8007074 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800706e:	7b7b      	ldrb	r3, [r7, #13]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e069      	b.n	800714c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007088:	e031      	b.n	80070ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b04      	cmp	r3, #4
 800708e:	d110      	bne.n	80070b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d102      	bne.n	800709c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007096:	7b3b      	ldrb	r3, [r7, #12]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d001      	beq.n	80070a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e055      	b.n	800714c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070b0:	e01d      	b.n	80070ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d108      	bne.n	80070ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d105      	bne.n	80070ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070be:	7b7b      	ldrb	r3, [r7, #13]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d102      	bne.n	80070ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070c4:	7b3b      	ldrb	r3, [r7, #12]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d001      	beq.n	80070ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e03e      	b.n	800714c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_TIM_Encoder_Start+0xc4>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d008      	beq.n	800710c <HAL_TIM_Encoder_Start+0xd4>
 80070fa:	e00f      	b.n	800711c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2201      	movs	r2, #1
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fb37 	bl	8007778 <TIM_CCxChannelCmd>
      break;
 800710a:	e016      	b.n	800713a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2201      	movs	r2, #1
 8007112:	2104      	movs	r1, #4
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fb2f 	bl	8007778 <TIM_CCxChannelCmd>
      break;
 800711a:	e00e      	b.n	800713a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fb27 	bl	8007778 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2201      	movs	r2, #1
 8007130:	2104      	movs	r1, #4
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fb20 	bl	8007778 <TIM_CCxChannelCmd>
      break;
 8007138:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800716e:	2302      	movs	r3, #2
 8007170:	e0ae      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b0c      	cmp	r3, #12
 800717e:	f200 809f 	bhi.w	80072c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071bd 	.word	0x080071bd
 800718c:	080072c1 	.word	0x080072c1
 8007190:	080072c1 	.word	0x080072c1
 8007194:	080072c1 	.word	0x080072c1
 8007198:	080071fd 	.word	0x080071fd
 800719c:	080072c1 	.word	0x080072c1
 80071a0:	080072c1 	.word	0x080072c1
 80071a4:	080072c1 	.word	0x080072c1
 80071a8:	0800723f 	.word	0x0800723f
 80071ac:	080072c1 	.word	0x080072c1
 80071b0:	080072c1 	.word	0x080072c1
 80071b4:	080072c1 	.word	0x080072c1
 80071b8:	0800727f 	.word	0x0800727f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f928 	bl	8007418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0204 	bic.w	r2, r2, #4
 80071e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	619a      	str	r2, [r3, #24]
      break;
 80071fa:	e064      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f978 	bl	80074f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6999      	ldr	r1, [r3, #24]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	619a      	str	r2, [r3, #24]
      break;
 800723c:	e043      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f9cd 	bl	80075e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0208 	orr.w	r2, r2, #8
 8007258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0204 	bic.w	r2, r2, #4
 8007268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69d9      	ldr	r1, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	61da      	str	r2, [r3, #28]
      break;
 800727c:	e023      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fa21 	bl	80076cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69d9      	ldr	r1, [r3, #28]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	021a      	lsls	r2, r3, #8
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	61da      	str	r2, [r3, #28]
      break;
 80072be:	e002      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
      break;
 80072c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a40      	ldr	r2, [pc, #256]	; (80073ec <TIM_Base_SetConfig+0x114>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d013      	beq.n	8007318 <TIM_Base_SetConfig+0x40>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f6:	d00f      	beq.n	8007318 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a3d      	ldr	r2, [pc, #244]	; (80073f0 <TIM_Base_SetConfig+0x118>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00b      	beq.n	8007318 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a3c      	ldr	r2, [pc, #240]	; (80073f4 <TIM_Base_SetConfig+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d007      	beq.n	8007318 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3b      	ldr	r2, [pc, #236]	; (80073f8 <TIM_Base_SetConfig+0x120>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a3a      	ldr	r2, [pc, #232]	; (80073fc <TIM_Base_SetConfig+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d108      	bne.n	800732a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2f      	ldr	r2, [pc, #188]	; (80073ec <TIM_Base_SetConfig+0x114>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d02b      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d027      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2c      	ldr	r2, [pc, #176]	; (80073f0 <TIM_Base_SetConfig+0x118>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d023      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2b      	ldr	r2, [pc, #172]	; (80073f4 <TIM_Base_SetConfig+0x11c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d01f      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <TIM_Base_SetConfig+0x120>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01b      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a29      	ldr	r2, [pc, #164]	; (80073fc <TIM_Base_SetConfig+0x124>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d017      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a28      	ldr	r2, [pc, #160]	; (8007400 <TIM_Base_SetConfig+0x128>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a27      	ldr	r2, [pc, #156]	; (8007404 <TIM_Base_SetConfig+0x12c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00f      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a26      	ldr	r2, [pc, #152]	; (8007408 <TIM_Base_SetConfig+0x130>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00b      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a25      	ldr	r2, [pc, #148]	; (800740c <TIM_Base_SetConfig+0x134>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d007      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a24      	ldr	r2, [pc, #144]	; (8007410 <TIM_Base_SetConfig+0x138>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a23      	ldr	r2, [pc, #140]	; (8007414 <TIM_Base_SetConfig+0x13c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d108      	bne.n	800739c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <TIM_Base_SetConfig+0x114>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_Base_SetConfig+0xf8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <TIM_Base_SetConfig+0x124>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d103      	bne.n	80073d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	615a      	str	r2, [r3, #20]
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40010400 	.word	0x40010400
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	40001800 	.word	0x40001800
 8007410:	40001c00 	.word	0x40001c00
 8007414:	40002000 	.word	0x40002000

08007418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f023 0201 	bic.w	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f023 0302 	bic.w	r3, r3, #2
 8007460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a20      	ldr	r2, [pc, #128]	; (80074f0 <TIM_OC1_SetConfig+0xd8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_OC1_SetConfig+0x64>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <TIM_OC1_SetConfig+0xdc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10c      	bne.n	8007496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0308 	bic.w	r3, r3, #8
 8007482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 0304 	bic.w	r3, r3, #4
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <TIM_OC1_SetConfig+0xd8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_OC1_SetConfig+0x8e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <TIM_OC1_SetConfig+0xdc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d111      	bne.n	80074ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	621a      	str	r2, [r3, #32]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40010400 	.word	0x40010400

080074f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f023 0210 	bic.w	r2, r3, #16
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f023 0320 	bic.w	r3, r3, #32
 8007542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a22      	ldr	r2, [pc, #136]	; (80075dc <TIM_OC2_SetConfig+0xe4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC2_SetConfig+0x68>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <TIM_OC2_SetConfig+0xe8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10d      	bne.n	800757c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a17      	ldr	r2, [pc, #92]	; (80075dc <TIM_OC2_SetConfig+0xe4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_OC2_SetConfig+0x94>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <TIM_OC2_SetConfig+0xe8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d113      	bne.n	80075b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800759a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400

080075e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800762c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a21      	ldr	r2, [pc, #132]	; (80076c4 <TIM_OC3_SetConfig+0xe0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d003      	beq.n	800764a <TIM_OC3_SetConfig+0x66>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <TIM_OC3_SetConfig+0xe4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d10d      	bne.n	8007666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <TIM_OC3_SetConfig+0xe0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_OC3_SetConfig+0x92>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <TIM_OC3_SetConfig+0xe4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d113      	bne.n	800769e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800767c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40010400 	.word	0x40010400

080076cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	031b      	lsls	r3, r3, #12
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a12      	ldr	r2, [pc, #72]	; (8007770 <TIM_OC4_SetConfig+0xa4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d003      	beq.n	8007734 <TIM_OC4_SetConfig+0x68>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a11      	ldr	r2, [pc, #68]	; (8007774 <TIM_OC4_SetConfig+0xa8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d109      	bne.n	8007748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	621a      	str	r2, [r3, #32]
}
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40010400 	.word	0x40010400

08007778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	2201      	movs	r2, #1
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	43db      	mvns	r3, r3
 800779a:	401a      	ands	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a1a      	ldr	r2, [r3, #32]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	fa01 f303 	lsl.w	r3, r1, r3
 80077b0:	431a      	orrs	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d8:	2302      	movs	r3, #2
 80077da:	e05a      	b.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a21      	ldr	r2, [pc, #132]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d022      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007828:	d01d      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d018      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1b      	ldr	r2, [pc, #108]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d013      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1a      	ldr	r2, [pc, #104]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00e      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d009      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d10c      	bne.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800786c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40010400 	.word	0x40010400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40001800 	.word	0x40001800

080078bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e03f      	b.n	800794e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fd fc62 	bl	80051ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2224      	movs	r2, #36	; 0x24
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 ff43 	bl	800878c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695a      	ldr	r2, [r3, #20]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08c      	sub	sp, #48	; 0x30
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b20      	cmp	r3, #32
 8007970:	d165      	bne.n	8007a3e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_UART_Transmit_DMA+0x26>
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e05e      	b.n	8007a40 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_UART_Transmit_DMA+0x38>
 800798c:	2302      	movs	r3, #2
 800798e:	e057      	b.n	8007a40 <HAL_UART_Transmit_DMA+0xe8>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2221      	movs	r2, #33	; 0x21
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <HAL_UART_Transmit_DMA+0xf0>)
 80079be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c4:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <HAL_UART_Transmit_DMA+0xf4>)
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	4a20      	ldr	r2, [pc, #128]	; (8007a50 <HAL_UART_Transmit_DMA+0xf8>)
 80079ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	2200      	movs	r2, #0
 80079d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	6819      	ldr	r1, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3304      	adds	r3, #4
 80079ec:	461a      	mov	r2, r3
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	f7fd ffc2 	bl	8005978 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3314      	adds	r3, #20
 8007a0c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	617b      	str	r3, [r7, #20]
   return(result);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3314      	adds	r3, #20
 8007a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a26:	627a      	str	r2, [r7, #36]	; 0x24
 8007a28:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6a39      	ldr	r1, [r7, #32]
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a3e:	2302      	movs	r3, #2
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3730      	adds	r7, #48	; 0x30
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	08008025 	.word	0x08008025
 8007a4c:	080080bf 	.word	0x080080bf
 8007a50:	08008237 	.word	0x08008237

08007a54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d11d      	bne.n	8007aaa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_UART_Receive_DMA+0x26>
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e016      	b.n	8007aac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_UART_Receive_DMA+0x38>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e00f      	b.n	8007aac <HAL_UART_Receive_DMA+0x58>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fc13 	bl	80082cc <UART_Start_Receive_DMA>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	e000      	b.n	8007aac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0ba      	sub	sp, #232	; 0xe8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10f      	bne.n	8007b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <HAL_UART_IRQHandler+0x66>
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fd7f 	bl	8008616 <UART_Receive_IT>
      return;
 8007b18:	e256      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80de 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x22c>
 8007b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80d1 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_UART_IRQHandler+0xae>
 8007b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f043 0201 	orr.w	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_UART_IRQHandler+0xd2>
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0202 	orr.w	r2, r3, #2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xf6>
 8007b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f043 0204 	orr.w	r2, r3, #4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d011      	beq.n	8007bda <HAL_UART_IRQHandler+0x126>
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f043 0208 	orr.w	r2, r3, #8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 81ed 	beq.w	8007fbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x14e>
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd0a 	bl	8008616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <HAL_UART_IRQHandler+0x17a>
 8007c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d04f      	beq.n	8007cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fc12 	bl	8008458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d141      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3314      	adds	r3, #20
 8007c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1d9      	bne.n	8007c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d013      	beq.n	8007cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	4a7d      	ldr	r2, [pc, #500]	; (8007e90 <HAL_UART_IRQHandler+0x3dc>)
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd ff30 	bl	8005b08 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	e00e      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f99a 	bl	8007ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	e00a      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f996 	bl	8007ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ccc:	e006      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f992 	bl	8007ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cda:	e170      	b.n	8007fbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cdc:	bf00      	nop
    return;
 8007cde:	e16e      	b.n	8007fbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f040 814a 	bne.w	8007f7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8143 	beq.w	8007f7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 813c 	beq.w	8007f7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	f040 80b4 	bne.w	8007e94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8140 	beq.w	8007fc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	f080 8139 	bcs.w	8007fc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d62:	f000 8088 	beq.w	8007e76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1d9      	bne.n	8007d66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e1      	bne.n	8007db2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	330c      	adds	r3, #12
 8007e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd fdd9 	bl	8005a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f8c0 	bl	800800c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e8c:	e099      	b.n	8007fc2 <HAL_UART_IRQHandler+0x50e>
 8007e8e:	bf00      	nop
 8007e90:	0800851f 	.word	0x0800851f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 808b 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8086 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ede:	647a      	str	r2, [r7, #68]	; 0x44
 8007ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e3      	bne.n	8007eba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	623b      	str	r3, [r7, #32]
   return(result);
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3314      	adds	r3, #20
 8007f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f16:	633a      	str	r2, [r7, #48]	; 0x30
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e3      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0310 	bic.w	r3, r3, #16
 8007f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f5c:	61fa      	str	r2, [r7, #28]
 8007f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e3      	bne.n	8007f38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f848 	bl	800800c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f7c:	e023      	b.n	8007fc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <HAL_UART_IRQHandler+0x4ea>
 8007f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fad5 	bl	8008546 <UART_Transmit_IT>
    return;
 8007f9c:	e014      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x514>
 8007faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fb15 	bl	80085e6 <UART_EndTransmit_IT>
    return;
 8007fbc:	e004      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
    return;
 8007fbe:	bf00      	nop
 8007fc0:	e002      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fc6:	bf00      	nop
  }
}
 8007fc8:	37e8      	adds	r7, #232	; 0xe8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b090      	sub	sp, #64	; 0x40
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d137      	bne.n	80080b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008042:	2200      	movs	r2, #0
 8008044:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3314      	adds	r3, #20
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	623b      	str	r3, [r7, #32]
   return(result);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3314      	adds	r3, #20
 8008064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008066:	633a      	str	r2, [r7, #48]	; 0x30
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	330c      	adds	r3, #12
 8008080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60fb      	str	r3, [r7, #12]
   return(result);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	330c      	adds	r3, #12
 8008098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800809a:	61fa      	str	r2, [r7, #28]
 800809c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	69b9      	ldr	r1, [r7, #24]
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	617b      	str	r3, [r7, #20]
   return(result);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080ae:	e002      	b.n	80080b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80080b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080b2:	f7fc f8ff 	bl	80042b4 <HAL_UART_TxCpltCallback>
}
 80080b6:	bf00      	nop
 80080b8:	3740      	adds	r7, #64	; 0x40
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff ff7f 	bl	8007fd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b09c      	sub	sp, #112	; 0x70
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d172      	bne.n	80081dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	2200      	movs	r2, #0
 80080fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008112:	66bb      	str	r3, [r7, #104]	; 0x68
 8008114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800811c:	65ba      	str	r2, [r7, #88]	; 0x58
 800811e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008122:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800812a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3314      	adds	r3, #20
 8008136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008142:	f023 0301 	bic.w	r3, r3, #1
 8008146:	667b      	str	r3, [r7, #100]	; 0x64
 8008148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3314      	adds	r3, #20
 800814e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008150:	647a      	str	r2, [r7, #68]	; 0x44
 8008152:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800815e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3314      	adds	r3, #20
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	623b      	str	r3, [r7, #32]
   return(result);
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817a:	663b      	str	r3, [r7, #96]	; 0x60
 800817c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3314      	adds	r3, #20
 8008182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008184:	633a      	str	r2, [r7, #48]	; 0x30
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800818a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e5      	bne.n	8008164 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	2220      	movs	r2, #32
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d119      	bne.n	80081dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	330c      	adds	r3, #12
 80081ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0310 	bic.w	r3, r3, #16
 80081be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081c8:	61fa      	str	r2, [r7, #28]
 80081ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	69b9      	ldr	r1, [r7, #24]
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	617b      	str	r3, [r7, #20]
   return(result);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e5      	bne.n	80081a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d106      	bne.n	80081f2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081e8:	4619      	mov	r1, r3
 80081ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081ec:	f7ff ff0e 	bl	800800c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081f0:	e002      	b.n	80081f8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80081f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081f4:	f7fc f876 	bl	80042e4 <HAL_UART_RxCpltCallback>
}
 80081f8:	bf00      	nop
 80081fa:	3770      	adds	r7, #112	; 0x70
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	2b01      	cmp	r3, #1
 8008214:	d108      	bne.n	8008228 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	4619      	mov	r1, r3
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff fef3 	bl	800800c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008226:	e002      	b.n	800822e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff fedb 	bl	8007fe4 <HAL_UART_RxHalfCpltCallback>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b21      	cmp	r3, #33	; 0x21
 8008268:	d108      	bne.n	800827c <UART_DMAError+0x46>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008276:	68b8      	ldr	r0, [r7, #8]
 8008278:	f000 f8c6 	bl	8008408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	bf0c      	ite	eq
 800828a:	2301      	moveq	r3, #1
 800828c:	2300      	movne	r3, #0
 800828e:	b2db      	uxtb	r3, r3
 8008290:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b22      	cmp	r3, #34	; 0x22
 800829c:	d108      	bne.n	80082b0 <UART_DMAError+0x7a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2200      	movs	r2, #0
 80082a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082aa:	68b8      	ldr	r0, [r7, #8]
 80082ac:	f000 f8d4 	bl	8008458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	f043 0210 	orr.w	r2, r3, #16
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082bc:	68b8      	ldr	r0, [r7, #8]
 80082be:	f7ff fe9b 	bl	8007ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b098      	sub	sp, #96	; 0x60
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2222      	movs	r2, #34	; 0x22
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	4a40      	ldr	r2, [pc, #256]	; (80083fc <UART_Start_Receive_DMA+0x130>)
 80082fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	4a3f      	ldr	r2, [pc, #252]	; (8008400 <UART_Start_Receive_DMA+0x134>)
 8008302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	4a3e      	ldr	r2, [pc, #248]	; (8008404 <UART_Start_Receive_DMA+0x138>)
 800830a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	2200      	movs	r2, #0
 8008312:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008314:	f107 0308 	add.w	r3, r7, #8
 8008318:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	f7fd fb24 	bl	8005978 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d019      	beq.n	800838a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	330c      	adds	r3, #12
 800835c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836c:	65bb      	str	r3, [r7, #88]	; 0x58
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	330c      	adds	r3, #12
 8008374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008376:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800837c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e5      	bne.n	8008356 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	f043 0301 	orr.w	r3, r3, #1
 80083a0:	657b      	str	r3, [r7, #84]	; 0x54
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3314      	adds	r3, #20
 80083a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e5      	bne.n	800838a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	617b      	str	r3, [r7, #20]
   return(result);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d4:	653b      	str	r3, [r7, #80]	; 0x50
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3314      	adds	r3, #20
 80083dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083de:	627a      	str	r2, [r7, #36]	; 0x24
 80083e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6a39      	ldr	r1, [r7, #32]
 80083e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3760      	adds	r7, #96	; 0x60
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	080080db 	.word	0x080080db
 8008400:	08008201 	.word	0x08008201
 8008404:	08008237 	.word	0x08008237

08008408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	61ba      	str	r2, [r7, #24]
 8008432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6979      	ldr	r1, [r7, #20]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	613b      	str	r3, [r7, #16]
   return(result);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e5      	bne.n	8008410 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800844c:	bf00      	nop
 800844e:	3724      	adds	r7, #36	; 0x24
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b095      	sub	sp, #84	; 0x54
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	330c      	adds	r3, #12
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	330c      	adds	r3, #12
 800847e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008480:	643a      	str	r2, [r7, #64]	; 0x40
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3314      	adds	r3, #20
 80084b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e5      	bne.n	8008494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d119      	bne.n	8008504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0310 	bic.w	r3, r3, #16
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	330c      	adds	r3, #12
 80084ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f0:	61ba      	str	r2, [r7, #24]
 80084f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008512:	bf00      	nop
 8008514:	3754      	adds	r7, #84	; 0x54
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fd5d 	bl	8007ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b21      	cmp	r3, #33	; 0x21
 8008558:	d13e      	bne.n	80085d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	d114      	bne.n	800858e <UART_Transmit_IT+0x48>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	1c9a      	adds	r2, r3, #2
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]
 800858c:	e008      	b.n	80085a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	1c59      	adds	r1, r3, #1
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6211      	str	r1, [r2, #32]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10f      	bne.n	80085d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fb fe54 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b08c      	sub	sp, #48	; 0x30
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b22      	cmp	r3, #34	; 0x22
 8008628:	f040 80ab 	bne.w	8008782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008634:	d117      	bne.n	8008666 <UART_Receive_IT+0x50>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d113      	bne.n	8008666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	b29a      	uxth	r2, r3
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	1c9a      	adds	r2, r3, #2
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	; 0x28
 8008664:	e026      	b.n	80086b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d007      	beq.n	800868a <UART_Receive_IT+0x74>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <UART_Receive_IT+0x82>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e008      	b.n	80086aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29b      	uxth	r3, r3
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4619      	mov	r1, r3
 80086c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d15a      	bne.n	800877e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0220 	bic.w	r2, r2, #32
 80086d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	2b01      	cmp	r3, #1
 8008706:	d135      	bne.n	8008774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	613b      	str	r3, [r7, #16]
   return(result);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f023 0310 	bic.w	r3, r3, #16
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	623a      	str	r2, [r7, #32]
 8008730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	69f9      	ldr	r1, [r7, #28]
 8008734:	6a3a      	ldr	r2, [r7, #32]
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	61bb      	str	r3, [r7, #24]
   return(result);
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b10      	cmp	r3, #16
 800874e:	d10a      	bne.n	8008766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fc4d 	bl	800800c <HAL_UARTEx_RxEventCallback>
 8008772:	e002      	b.n	800877a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7fb fdb5 	bl	80042e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e002      	b.n	8008784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e000      	b.n	8008784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
  }
}
 8008784:	4618      	mov	r0, r3
 8008786:	3730      	adds	r7, #48	; 0x30
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b0c0      	sub	sp, #256	; 0x100
 8008792:	af00      	add	r7, sp, #0
 8008794:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a8:	68d9      	ldr	r1, [r3, #12]
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	ea40 0301 	orr.w	r3, r0, r1
 80087b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	431a      	orrs	r2, r3
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087e4:	f021 010c 	bic.w	r1, r1, #12
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087f2:	430b      	orrs	r3, r1
 80087f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	6999      	ldr	r1, [r3, #24]
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	ea40 0301 	orr.w	r3, r0, r1
 8008812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <UART_SetConfig+0x2cc>)
 800881c:	429a      	cmp	r2, r3
 800881e:	d005      	beq.n	800882c <UART_SetConfig+0xa0>
 8008820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b8d      	ldr	r3, [pc, #564]	; (8008a5c <UART_SetConfig+0x2d0>)
 8008828:	429a      	cmp	r2, r3
 800882a:	d104      	bne.n	8008836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800882c:	f7fe fa32 	bl	8006c94 <HAL_RCC_GetPCLK2Freq>
 8008830:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008834:	e003      	b.n	800883e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008836:	f7fe fa19 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 800883a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008848:	f040 810c 	bne.w	8008a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800884c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008850:	2200      	movs	r2, #0
 8008852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008856:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800885a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	1891      	adds	r1, r2, r2
 8008864:	65b9      	str	r1, [r7, #88]	; 0x58
 8008866:	415b      	adcs	r3, r3
 8008868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800886a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800886e:	4621      	mov	r1, r4
 8008870:	eb12 0801 	adds.w	r8, r2, r1
 8008874:	4629      	mov	r1, r5
 8008876:	eb43 0901 	adc.w	r9, r3, r1
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800888a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800888e:	4690      	mov	r8, r2
 8008890:	4699      	mov	r9, r3
 8008892:	4623      	mov	r3, r4
 8008894:	eb18 0303 	adds.w	r3, r8, r3
 8008898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800889c:	462b      	mov	r3, r5
 800889e:	eb49 0303 	adc.w	r3, r9, r3
 80088a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ba:	460b      	mov	r3, r1
 80088bc:	18db      	adds	r3, r3, r3
 80088be:	653b      	str	r3, [r7, #80]	; 0x50
 80088c0:	4613      	mov	r3, r2
 80088c2:	eb42 0303 	adc.w	r3, r2, r3
 80088c6:	657b      	str	r3, [r7, #84]	; 0x54
 80088c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088d0:	f7f8 f8f8 	bl	8000ac4 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4b61      	ldr	r3, [pc, #388]	; (8008a60 <UART_SetConfig+0x2d4>)
 80088da:	fba3 2302 	umull	r2, r3, r3, r2
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	011c      	lsls	r4, r3, #4
 80088e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	1891      	adds	r1, r2, r2
 80088fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80088fc:	415b      	adcs	r3, r3
 80088fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008904:	4641      	mov	r1, r8
 8008906:	eb12 0a01 	adds.w	sl, r2, r1
 800890a:	4649      	mov	r1, r9
 800890c:	eb43 0b01 	adc.w	fp, r3, r1
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800891c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008924:	4692      	mov	sl, r2
 8008926:	469b      	mov	fp, r3
 8008928:	4643      	mov	r3, r8
 800892a:	eb1a 0303 	adds.w	r3, sl, r3
 800892e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008932:	464b      	mov	r3, r9
 8008934:	eb4b 0303 	adc.w	r3, fp, r3
 8008938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008948:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800894c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008950:	460b      	mov	r3, r1
 8008952:	18db      	adds	r3, r3, r3
 8008954:	643b      	str	r3, [r7, #64]	; 0x40
 8008956:	4613      	mov	r3, r2
 8008958:	eb42 0303 	adc.w	r3, r2, r3
 800895c:	647b      	str	r3, [r7, #68]	; 0x44
 800895e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008966:	f7f8 f8ad 	bl	8000ac4 <__aeabi_uldivmod>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4611      	mov	r1, r2
 8008970:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008972:	fba3 2301 	umull	r2, r3, r3, r1
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2264      	movs	r2, #100	; 0x64
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	1acb      	subs	r3, r1, r3
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008986:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008988:	fba3 2302 	umull	r2, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008994:	441c      	add	r4, r3
 8008996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800899a:	2200      	movs	r2, #0
 800899c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	1891      	adds	r1, r2, r2
 80089ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80089b0:	415b      	adcs	r3, r3
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089b8:	4641      	mov	r1, r8
 80089ba:	1851      	adds	r1, r2, r1
 80089bc:	6339      	str	r1, [r7, #48]	; 0x30
 80089be:	4649      	mov	r1, r9
 80089c0:	414b      	adcs	r3, r1
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089d0:	4659      	mov	r1, fp
 80089d2:	00cb      	lsls	r3, r1, #3
 80089d4:	4651      	mov	r1, sl
 80089d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089da:	4651      	mov	r1, sl
 80089dc:	00ca      	lsls	r2, r1, #3
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	4642      	mov	r2, r8
 80089e6:	189b      	adds	r3, r3, r2
 80089e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089ec:	464b      	mov	r3, r9
 80089ee:	460a      	mov	r2, r1
 80089f0:	eb42 0303 	adc.w	r3, r2, r3
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	18db      	adds	r3, r3, r3
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a12:	4613      	mov	r3, r2
 8008a14:	eb42 0303 	adc.w	r3, r2, r3
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a22:	f7f8 f84f 	bl	8000ac4 <__aeabi_uldivmod>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a30:	095b      	lsrs	r3, r3, #5
 8008a32:	2164      	movs	r1, #100	; 0x64
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	3332      	adds	r3, #50	; 0x32
 8008a3e:	4a08      	ldr	r2, [pc, #32]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008a40:	fba2 2303 	umull	r2, r3, r2, r3
 8008a44:	095b      	lsrs	r3, r3, #5
 8008a46:	f003 0207 	and.w	r2, r3, #7
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4422      	add	r2, r4
 8008a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a54:	e105      	b.n	8008c62 <UART_SetConfig+0x4d6>
 8008a56:	bf00      	nop
 8008a58:	40011000 	.word	0x40011000
 8008a5c:	40011400 	.word	0x40011400
 8008a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a76:	4642      	mov	r2, r8
 8008a78:	464b      	mov	r3, r9
 8008a7a:	1891      	adds	r1, r2, r2
 8008a7c:	6239      	str	r1, [r7, #32]
 8008a7e:	415b      	adcs	r3, r3
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
 8008a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a86:	4641      	mov	r1, r8
 8008a88:	1854      	adds	r4, r2, r1
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	eb43 0501 	adc.w	r5, r3, r1
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	00eb      	lsls	r3, r5, #3
 8008a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a9e:	00e2      	lsls	r2, r4, #3
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	461d      	mov	r5, r3
 8008aa4:	4643      	mov	r3, r8
 8008aa6:	18e3      	adds	r3, r4, r3
 8008aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aac:	464b      	mov	r3, r9
 8008aae:	eb45 0303 	adc.w	r3, r5, r3
 8008ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	008b      	lsls	r3, r1, #2
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008adc:	4621      	mov	r1, r4
 8008ade:	008a      	lsls	r2, r1, #2
 8008ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ae4:	f7f7 ffee 	bl	8000ac4 <__aeabi_uldivmod>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4b60      	ldr	r3, [pc, #384]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008aee:	fba3 2302 	umull	r2, r3, r3, r2
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	011c      	lsls	r4, r3, #4
 8008af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	1891      	adds	r1, r2, r2
 8008b0e:	61b9      	str	r1, [r7, #24]
 8008b10:	415b      	adcs	r3, r3
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b18:	4641      	mov	r1, r8
 8008b1a:	1851      	adds	r1, r2, r1
 8008b1c:	6139      	str	r1, [r7, #16]
 8008b1e:	4649      	mov	r1, r9
 8008b20:	414b      	adcs	r3, r1
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	f04f 0200 	mov.w	r2, #0
 8008b28:	f04f 0300 	mov.w	r3, #0
 8008b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b30:	4659      	mov	r1, fp
 8008b32:	00cb      	lsls	r3, r1, #3
 8008b34:	4651      	mov	r1, sl
 8008b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	00ca      	lsls	r2, r1, #3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	4642      	mov	r2, r8
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	460a      	mov	r2, r1
 8008b50:	eb42 0303 	adc.w	r3, r2, r3
 8008b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b70:	4649      	mov	r1, r9
 8008b72:	008b      	lsls	r3, r1, #2
 8008b74:	4641      	mov	r1, r8
 8008b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	008a      	lsls	r2, r1, #2
 8008b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b82:	f7f7 ff9f 	bl	8000ac4 <__aeabi_uldivmod>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b90:	095b      	lsrs	r3, r3, #5
 8008b92:	2164      	movs	r1, #100	; 0x64
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	3332      	adds	r3, #50	; 0x32
 8008b9e:	4a34      	ldr	r2, [pc, #208]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba4:	095b      	lsrs	r3, r3, #5
 8008ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008baa:	441c      	add	r4, r3
 8008bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008bb4:	677a      	str	r2, [r7, #116]	; 0x74
 8008bb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bba:	4642      	mov	r2, r8
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bca:	4641      	mov	r1, r8
 8008bcc:	1851      	adds	r1, r2, r1
 8008bce:	6039      	str	r1, [r7, #0]
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	414b      	adcs	r3, r1
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	f04f 0300 	mov.w	r3, #0
 8008bde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008be2:	4659      	mov	r1, fp
 8008be4:	00cb      	lsls	r3, r1, #3
 8008be6:	4651      	mov	r1, sl
 8008be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bec:	4651      	mov	r1, sl
 8008bee:	00ca      	lsls	r2, r1, #3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	189b      	adds	r3, r3, r2
 8008bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	460a      	mov	r2, r1
 8008c00:	eb42 0303 	adc.w	r3, r2, r3
 8008c04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c10:	667a      	str	r2, [r7, #100]	; 0x64
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c1e:	4649      	mov	r1, r9
 8008c20:	008b      	lsls	r3, r1, #2
 8008c22:	4641      	mov	r1, r8
 8008c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c28:	4641      	mov	r1, r8
 8008c2a:	008a      	lsls	r2, r1, #2
 8008c2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c30:	f7f7 ff48 	bl	8000ac4 <__aeabi_uldivmod>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	2164      	movs	r1, #100	; 0x64
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	3332      	adds	r3, #50	; 0x32
 8008c4c:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4422      	add	r2, r4
 8008c60:	609a      	str	r2, [r3, #8]
}
 8008c62:	bf00      	nop
 8008c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	51eb851f 	.word	0x51eb851f

08008c74 <__cxa_pure_virtual>:
 8008c74:	b508      	push	{r3, lr}
 8008c76:	f000 f80d 	bl	8008c94 <_ZSt9terminatev>

08008c7a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008c7a:	b508      	push	{r3, lr}
 8008c7c:	4780      	blx	r0
 8008c7e:	f000 f80e 	bl	8008c9e <abort>
	...

08008c84 <_ZSt13get_terminatev>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <_ZSt13get_terminatev+0xc>)
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	f3bf 8f5b 	dmb	ish
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <_ZSt9terminatev>:
 8008c94:	b508      	push	{r3, lr}
 8008c96:	f7ff fff5 	bl	8008c84 <_ZSt13get_terminatev>
 8008c9a:	f7ff ffee 	bl	8008c7a <_ZN10__cxxabiv111__terminateEPFvvE>

08008c9e <abort>:
 8008c9e:	b508      	push	{r3, lr}
 8008ca0:	2006      	movs	r0, #6
 8008ca2:	f000 f873 	bl	8008d8c <raise>
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	f7fc fb94 	bl	80053d4 <_exit>

08008cac <__errno>:
 8008cac:	4b01      	ldr	r3, [pc, #4]	; (8008cb4 <__errno+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000010 	.word	0x20000010

08008cb8 <__libc_init_array>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4d0d      	ldr	r5, [pc, #52]	; (8008cf0 <__libc_init_array+0x38>)
 8008cbc:	4c0d      	ldr	r4, [pc, #52]	; (8008cf4 <__libc_init_array+0x3c>)
 8008cbe:	1b64      	subs	r4, r4, r5
 8008cc0:	10a4      	asrs	r4, r4, #2
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	42a6      	cmp	r6, r4
 8008cc6:	d109      	bne.n	8008cdc <__libc_init_array+0x24>
 8008cc8:	4d0b      	ldr	r5, [pc, #44]	; (8008cf8 <__libc_init_array+0x40>)
 8008cca:	4c0c      	ldr	r4, [pc, #48]	; (8008cfc <__libc_init_array+0x44>)
 8008ccc:	f000 f9b0 	bl	8009030 <_init>
 8008cd0:	1b64      	subs	r4, r4, r5
 8008cd2:	10a4      	asrs	r4, r4, #2
 8008cd4:	2600      	movs	r6, #0
 8008cd6:	42a6      	cmp	r6, r4
 8008cd8:	d105      	bne.n	8008ce6 <__libc_init_array+0x2e>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce0:	4798      	blx	r3
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7ee      	b.n	8008cc4 <__libc_init_array+0xc>
 8008ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cea:	4798      	blx	r3
 8008cec:	3601      	adds	r6, #1
 8008cee:	e7f2      	b.n	8008cd6 <__libc_init_array+0x1e>
 8008cf0:	08009370 	.word	0x08009370
 8008cf4:	08009370 	.word	0x08009370
 8008cf8:	08009370 	.word	0x08009370
 8008cfc:	08009378 	.word	0x08009378

08008d00 <memcpy>:
 8008d00:	440a      	add	r2, r1
 8008d02:	4291      	cmp	r1, r2
 8008d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d08:	d100      	bne.n	8008d0c <memcpy+0xc>
 8008d0a:	4770      	bx	lr
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d16:	4291      	cmp	r1, r2
 8008d18:	d1f9      	bne.n	8008d0e <memcpy+0xe>
 8008d1a:	bd10      	pop	{r4, pc}

08008d1c <memset>:
 8008d1c:	4402      	add	r2, r0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d100      	bne.n	8008d26 <memset+0xa>
 8008d24:	4770      	bx	lr
 8008d26:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2a:	e7f9      	b.n	8008d20 <memset+0x4>

08008d2c <realloc>:
 8008d2c:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <realloc+0xc>)
 8008d2e:	460a      	mov	r2, r1
 8008d30:	4601      	mov	r1, r0
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	f000 b8da 	b.w	8008eec <_realloc_r>
 8008d38:	20000010 	.word	0x20000010

08008d3c <_raise_r>:
 8008d3c:	291f      	cmp	r1, #31
 8008d3e:	b538      	push	{r3, r4, r5, lr}
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	d904      	bls.n	8008d50 <_raise_r+0x14>
 8008d46:	2316      	movs	r3, #22
 8008d48:	6003      	str	r3, [r0, #0]
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d52:	b112      	cbz	r2, 8008d5a <_raise_r+0x1e>
 8008d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d58:	b94b      	cbnz	r3, 8008d6e <_raise_r+0x32>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f830 	bl	8008dc0 <_getpid_r>
 8008d60:	462a      	mov	r2, r5
 8008d62:	4601      	mov	r1, r0
 8008d64:	4620      	mov	r0, r4
 8008d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d6a:	f000 b817 	b.w	8008d9c <_kill_r>
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d00a      	beq.n	8008d88 <_raise_r+0x4c>
 8008d72:	1c59      	adds	r1, r3, #1
 8008d74:	d103      	bne.n	8008d7e <_raise_r+0x42>
 8008d76:	2316      	movs	r3, #22
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	e7e7      	b.n	8008d4e <_raise_r+0x12>
 8008d7e:	2400      	movs	r4, #0
 8008d80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d84:	4628      	mov	r0, r5
 8008d86:	4798      	blx	r3
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e7e0      	b.n	8008d4e <_raise_r+0x12>

08008d8c <raise>:
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <raise+0xc>)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f7ff bfd3 	b.w	8008d3c <_raise_r>
 8008d96:	bf00      	nop
 8008d98:	20000010 	.word	0x20000010

08008d9c <_kill_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d07      	ldr	r5, [pc, #28]	; (8008dbc <_kill_r+0x20>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	4611      	mov	r1, r2
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	f7fc fb03 	bl	80053b4 <_kill>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	d102      	bne.n	8008db8 <_kill_r+0x1c>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b103      	cbz	r3, 8008db8 <_kill_r+0x1c>
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000ef8 	.word	0x20000ef8

08008dc0 <_getpid_r>:
 8008dc0:	f7fc baf0 	b.w	80053a4 <_getpid>

08008dc4 <sbrk_aligned>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4e0e      	ldr	r6, [pc, #56]	; (8008e00 <sbrk_aligned+0x3c>)
 8008dc8:	460c      	mov	r4, r1
 8008dca:	6831      	ldr	r1, [r6, #0]
 8008dcc:	4605      	mov	r5, r0
 8008dce:	b911      	cbnz	r1, 8008dd6 <sbrk_aligned+0x12>
 8008dd0:	f000 f8bc 	bl	8008f4c <_sbrk_r>
 8008dd4:	6030      	str	r0, [r6, #0]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f8b7 	bl	8008f4c <_sbrk_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	d00a      	beq.n	8008df8 <sbrk_aligned+0x34>
 8008de2:	1cc4      	adds	r4, r0, #3
 8008de4:	f024 0403 	bic.w	r4, r4, #3
 8008de8:	42a0      	cmp	r0, r4
 8008dea:	d007      	beq.n	8008dfc <sbrk_aligned+0x38>
 8008dec:	1a21      	subs	r1, r4, r0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f8ac 	bl	8008f4c <_sbrk_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d101      	bne.n	8008dfc <sbrk_aligned+0x38>
 8008df8:	f04f 34ff 	mov.w	r4, #4294967295
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	20000ef4 	.word	0x20000ef4

08008e04 <_malloc_r>:
 8008e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e08:	1ccd      	adds	r5, r1, #3
 8008e0a:	f025 0503 	bic.w	r5, r5, #3
 8008e0e:	3508      	adds	r5, #8
 8008e10:	2d0c      	cmp	r5, #12
 8008e12:	bf38      	it	cc
 8008e14:	250c      	movcc	r5, #12
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	4607      	mov	r7, r0
 8008e1a:	db01      	blt.n	8008e20 <_malloc_r+0x1c>
 8008e1c:	42a9      	cmp	r1, r5
 8008e1e:	d905      	bls.n	8008e2c <_malloc_r+0x28>
 8008e20:	230c      	movs	r3, #12
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	2600      	movs	r6, #0
 8008e26:	4630      	mov	r0, r6
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	4e2e      	ldr	r6, [pc, #184]	; (8008ee8 <_malloc_r+0xe4>)
 8008e2e:	f000 f89d 	bl	8008f6c <__malloc_lock>
 8008e32:	6833      	ldr	r3, [r6, #0]
 8008e34:	461c      	mov	r4, r3
 8008e36:	bb34      	cbnz	r4, 8008e86 <_malloc_r+0x82>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f7ff ffc2 	bl	8008dc4 <sbrk_aligned>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	4604      	mov	r4, r0
 8008e44:	d14d      	bne.n	8008ee2 <_malloc_r+0xde>
 8008e46:	6834      	ldr	r4, [r6, #0]
 8008e48:	4626      	mov	r6, r4
 8008e4a:	2e00      	cmp	r6, #0
 8008e4c:	d140      	bne.n	8008ed0 <_malloc_r+0xcc>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	4631      	mov	r1, r6
 8008e52:	4638      	mov	r0, r7
 8008e54:	eb04 0803 	add.w	r8, r4, r3
 8008e58:	f000 f878 	bl	8008f4c <_sbrk_r>
 8008e5c:	4580      	cmp	r8, r0
 8008e5e:	d13a      	bne.n	8008ed6 <_malloc_r+0xd2>
 8008e60:	6821      	ldr	r1, [r4, #0]
 8008e62:	3503      	adds	r5, #3
 8008e64:	1a6d      	subs	r5, r5, r1
 8008e66:	f025 0503 	bic.w	r5, r5, #3
 8008e6a:	3508      	adds	r5, #8
 8008e6c:	2d0c      	cmp	r5, #12
 8008e6e:	bf38      	it	cc
 8008e70:	250c      	movcc	r5, #12
 8008e72:	4629      	mov	r1, r5
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff ffa5 	bl	8008dc4 <sbrk_aligned>
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d02b      	beq.n	8008ed6 <_malloc_r+0xd2>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	442b      	add	r3, r5
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	e00e      	b.n	8008ea4 <_malloc_r+0xa0>
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	1b52      	subs	r2, r2, r5
 8008e8a:	d41e      	bmi.n	8008eca <_malloc_r+0xc6>
 8008e8c:	2a0b      	cmp	r2, #11
 8008e8e:	d916      	bls.n	8008ebe <_malloc_r+0xba>
 8008e90:	1961      	adds	r1, r4, r5
 8008e92:	42a3      	cmp	r3, r4
 8008e94:	6025      	str	r5, [r4, #0]
 8008e96:	bf18      	it	ne
 8008e98:	6059      	strne	r1, [r3, #4]
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	bf08      	it	eq
 8008e9e:	6031      	streq	r1, [r6, #0]
 8008ea0:	5162      	str	r2, [r4, r5]
 8008ea2:	604b      	str	r3, [r1, #4]
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f104 060b 	add.w	r6, r4, #11
 8008eaa:	f000 f865 	bl	8008f78 <__malloc_unlock>
 8008eae:	f026 0607 	bic.w	r6, r6, #7
 8008eb2:	1d23      	adds	r3, r4, #4
 8008eb4:	1af2      	subs	r2, r6, r3
 8008eb6:	d0b6      	beq.n	8008e26 <_malloc_r+0x22>
 8008eb8:	1b9b      	subs	r3, r3, r6
 8008eba:	50a3      	str	r3, [r4, r2]
 8008ebc:	e7b3      	b.n	8008e26 <_malloc_r+0x22>
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	bf0c      	ite	eq
 8008ec4:	6032      	streq	r2, [r6, #0]
 8008ec6:	605a      	strne	r2, [r3, #4]
 8008ec8:	e7ec      	b.n	8008ea4 <_malloc_r+0xa0>
 8008eca:	4623      	mov	r3, r4
 8008ecc:	6864      	ldr	r4, [r4, #4]
 8008ece:	e7b2      	b.n	8008e36 <_malloc_r+0x32>
 8008ed0:	4634      	mov	r4, r6
 8008ed2:	6876      	ldr	r6, [r6, #4]
 8008ed4:	e7b9      	b.n	8008e4a <_malloc_r+0x46>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	4638      	mov	r0, r7
 8008edc:	f000 f84c 	bl	8008f78 <__malloc_unlock>
 8008ee0:	e7a1      	b.n	8008e26 <_malloc_r+0x22>
 8008ee2:	6025      	str	r5, [r4, #0]
 8008ee4:	e7de      	b.n	8008ea4 <_malloc_r+0xa0>
 8008ee6:	bf00      	nop
 8008ee8:	20000ef0 	.word	0x20000ef0

08008eec <_realloc_r>:
 8008eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	460e      	mov	r6, r1
 8008ef6:	b921      	cbnz	r1, 8008f02 <_realloc_r+0x16>
 8008ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	4611      	mov	r1, r2
 8008efe:	f7ff bf81 	b.w	8008e04 <_malloc_r>
 8008f02:	b92a      	cbnz	r2, 8008f10 <_realloc_r+0x24>
 8008f04:	f000 f83e 	bl	8008f84 <_free_r>
 8008f08:	4625      	mov	r5, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	f000 f884 	bl	800901c <_malloc_usable_size_r>
 8008f14:	4284      	cmp	r4, r0
 8008f16:	4607      	mov	r7, r0
 8008f18:	d802      	bhi.n	8008f20 <_realloc_r+0x34>
 8008f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f1e:	d812      	bhi.n	8008f46 <_realloc_r+0x5a>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7ff ff6e 	bl	8008e04 <_malloc_r>
 8008f28:	4605      	mov	r5, r0
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d0ed      	beq.n	8008f0a <_realloc_r+0x1e>
 8008f2e:	42bc      	cmp	r4, r7
 8008f30:	4622      	mov	r2, r4
 8008f32:	4631      	mov	r1, r6
 8008f34:	bf28      	it	cs
 8008f36:	463a      	movcs	r2, r7
 8008f38:	f7ff fee2 	bl	8008d00 <memcpy>
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4640      	mov	r0, r8
 8008f40:	f000 f820 	bl	8008f84 <_free_r>
 8008f44:	e7e1      	b.n	8008f0a <_realloc_r+0x1e>
 8008f46:	4635      	mov	r5, r6
 8008f48:	e7df      	b.n	8008f0a <_realloc_r+0x1e>
	...

08008f4c <_sbrk_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	; (8008f68 <_sbrk_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7fc fa46 	bl	80053e8 <_sbrk>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_sbrk_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_sbrk_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	20000ef8 	.word	0x20000ef8

08008f6c <__malloc_lock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__malloc_lock+0x8>)
 8008f6e:	f000 b85d 	b.w	800902c <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	20000efc 	.word	0x20000efc

08008f78 <__malloc_unlock>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__malloc_unlock+0x8>)
 8008f7a:	f000 b858 	b.w	800902e <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	20000efc 	.word	0x20000efc

08008f84 <_free_r>:
 8008f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d044      	beq.n	8009014 <_free_r+0x90>
 8008f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8e:	9001      	str	r0, [sp, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f1a1 0404 	sub.w	r4, r1, #4
 8008f96:	bfb8      	it	lt
 8008f98:	18e4      	addlt	r4, r4, r3
 8008f9a:	f7ff ffe7 	bl	8008f6c <__malloc_lock>
 8008f9e:	4a1e      	ldr	r2, [pc, #120]	; (8009018 <_free_r+0x94>)
 8008fa0:	9801      	ldr	r0, [sp, #4]
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	b933      	cbnz	r3, 8008fb4 <_free_r+0x30>
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	6014      	str	r4, [r2, #0]
 8008faa:	b003      	add	sp, #12
 8008fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb0:	f7ff bfe2 	b.w	8008f78 <__malloc_unlock>
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d908      	bls.n	8008fca <_free_r+0x46>
 8008fb8:	6825      	ldr	r5, [r4, #0]
 8008fba:	1961      	adds	r1, r4, r5
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf01      	itttt	eq
 8008fc0:	6819      	ldreq	r1, [r3, #0]
 8008fc2:	685b      	ldreq	r3, [r3, #4]
 8008fc4:	1949      	addeq	r1, r1, r5
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	e7ed      	b.n	8008fa6 <_free_r+0x22>
 8008fca:	461a      	mov	r2, r3
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b10b      	cbz	r3, 8008fd4 <_free_r+0x50>
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	d9fa      	bls.n	8008fca <_free_r+0x46>
 8008fd4:	6811      	ldr	r1, [r2, #0]
 8008fd6:	1855      	adds	r5, r2, r1
 8008fd8:	42a5      	cmp	r5, r4
 8008fda:	d10b      	bne.n	8008ff4 <_free_r+0x70>
 8008fdc:	6824      	ldr	r4, [r4, #0]
 8008fde:	4421      	add	r1, r4
 8008fe0:	1854      	adds	r4, r2, r1
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	6011      	str	r1, [r2, #0]
 8008fe6:	d1e0      	bne.n	8008faa <_free_r+0x26>
 8008fe8:	681c      	ldr	r4, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	6053      	str	r3, [r2, #4]
 8008fee:	4421      	add	r1, r4
 8008ff0:	6011      	str	r1, [r2, #0]
 8008ff2:	e7da      	b.n	8008faa <_free_r+0x26>
 8008ff4:	d902      	bls.n	8008ffc <_free_r+0x78>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	e7d6      	b.n	8008faa <_free_r+0x26>
 8008ffc:	6825      	ldr	r5, [r4, #0]
 8008ffe:	1961      	adds	r1, r4, r5
 8009000:	428b      	cmp	r3, r1
 8009002:	bf04      	itt	eq
 8009004:	6819      	ldreq	r1, [r3, #0]
 8009006:	685b      	ldreq	r3, [r3, #4]
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	bf04      	itt	eq
 800900c:	1949      	addeq	r1, r1, r5
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	6054      	str	r4, [r2, #4]
 8009012:	e7ca      	b.n	8008faa <_free_r+0x26>
 8009014:	b003      	add	sp, #12
 8009016:	bd30      	pop	{r4, r5, pc}
 8009018:	20000ef0 	.word	0x20000ef0

0800901c <_malloc_usable_size_r>:
 800901c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009020:	1f18      	subs	r0, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbc      	itt	lt
 8009026:	580b      	ldrlt	r3, [r1, r0]
 8009028:	18c0      	addlt	r0, r0, r3
 800902a:	4770      	bx	lr

0800902c <__retarget_lock_acquire_recursive>:
 800902c:	4770      	bx	lr

0800902e <__retarget_lock_release_recursive>:
 800902e:	4770      	bx	lr

08009030 <_init>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr

0800903c <_fini>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr
